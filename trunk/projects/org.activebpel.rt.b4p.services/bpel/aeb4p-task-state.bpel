<?xml version="1.0" encoding="UTF-8"?>
<bpel:process xmlns:abx="http://www.activebpel.org/bpel/extension" xmlns:aeid="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl" xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable" xmlns:ext="http://www.activebpel.org/2006/09/bpel/extension/activity" xmlns:htapi="http://www.example.org/WS-HT/api" xmlns:htaw="http://www.example.org/WS-HT/api/wsdl" xmlns:htd="http://www.example.org/WS-HT" xmlns:htdt="http://www.example.org/WS-HT/api/xsd" xmlns:htp="http://www.example.org/WS-HT/protocol" xmlns:sref="http://docs.oasis-open.org/wsbpel/2.0/serviceref" xmlns:store="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-storage.wsdl" xmlns:tc="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-common.wsdl" xmlns:tew="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-events.wsdl" xmlns:tewt="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-events-wsdl.xsd" xmlns:trt="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-rt.xsd" xmlns:ts="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-state.wsdl" xmlns:tsw="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-state-wsdl.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" expressionLanguage="urn:active-endpoints:expression-language:xquery1.0" name="aeb4p-task-state" suppressJoinFailure="yes" targetNamespace="http://www.activebpel.org/b4p/2007/10/wshumantask">
   <bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="../wsdl/aeb4p-task-state.wsdl" namespace="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-state.wsdl"/>
   <bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="../wsdl/aeb4p-task-common.wsdl" namespace="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-common.wsdl"/>
   <bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="../wsdl/aeb4p-task-storage.wsdl" namespace="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-storage.wsdl"/>
   <bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="../wsdl/aeb4p-task-events.wsdl" namespace="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-events.wsdl"/>
   <bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="../../org.activebpel.rt.ht/support/wsdl/ws-humantask-api.wsdl" namespace="http://www.example.org/WS-HT/api/wsdl"/>
   <bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="../../org.activebpel.rt.identity/support/wsdl/identity.wsdl" namespace="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"/>
   <bpel:import importType="http://www.w3.org/2001/XMLSchema" location="../schema/aeb4p-task-state-wsdl.xsd" namespace="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-state-wsdl.xsd"/>
   <bpel:import importType="http://www.w3.org/2001/XMLSchema" location="../schema/aeb4p-task-rt.xsd" namespace="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-rt.xsd"/>
   <bpel:import importType="http://www.w3.org/2001/XMLSchema" location="../../org.activebpel.rt.ht/support/schema/ws-humantask-api-wsdl.xsd" namespace="http://www.example.org/WS-HT/api/xsd"/>
   <bpel:partnerLinks>
      <bpel:partnerLink myRole="process" name="internal" partnerLinkType="ts:aeInternalTaskOperationsPLT" partnerRole="process"/>
      <bpel:partnerLink name="storagePL" partnerLinkType="store:storagePLT" partnerRole="system"/>
      <bpel:partnerLink name="taskStateChangeListenerPL" partnerLinkType="tew:taskStateChangeListenerPLT" partnerRole="listener"/>
      <bpel:partnerLink myRole="process" name="taskOperations" partnerLinkType="ts:taskOperationsPLT"/>
      <bpel:partnerLink name="identityPL" partnerLinkType="aeid:identityPLT" partnerRole="service"/>
      <bpel:partnerLink name="wakeupPL" partnerLinkType="ts:wakeupPLT" partnerRole="process"/>
      <bpel:partnerLink myRole="process" name="aeTaskOperations" partnerLinkType="ts:aeTaskOperationsPLT"/>
      <bpel:partnerLink myRole="process" name="taskStateChangeRegistryPL" partnerLinkType="tew:taskStateChangeRegistryPLT"/>
      <bpel:partnerLink name="removeOwnerPLT" partnerLinkType="ts:removeOwnerPLT" partnerRole="service_provider"/>
   </bpel:partnerLinks>
   <bpel:variables>
      <bpel:variable element="tewt:listenerList" name="gListenerList">
         <bpel:from>
            <bpel:literal>
               <tew:listenerList xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl" xmlns:tew="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-events-wsdl.xsd">
</tew:listenerList>
            </bpel:literal>
         </bpel:from>
      </bpel:variable>
      <bpel:variable name="gNextListenerId" type="xsd:nonNegativeInteger">
         <bpel:from>
            <bpel:literal>1</bpel:literal>
         </bpel:from>
      </bpel:variable>
      <bpel:variable name="gDeferActivation" type="xsd:dateTime">
         <bpel:from>(current-dateTime() + xs:yearMonthDuration(xs:duration('P250Y'))) + xs:dayTimeDuration(xs:duration('P250Y'))</bpel:from>
      </bpel:variable>
      <bpel:variable name="gExpiration" type="xsd:dateTime">
         <bpel:from>(current-dateTime() + xs:yearMonthDuration(xs:duration('P300Y'))) + xs:dayTimeDuration(xs:duration('P300Y'))</bpel:from>
      </bpel:variable>
      <bpel:variable name="gFinalStateReached" type="xsd:boolean">
         <bpel:from>false()</bpel:from>
      </bpel:variable>
      <bpel:variable element="trt:taskInstance" name="gTaskInstance"/>
      <bpel:variable name="gOldState" type="htapi:tStatus"/>
      <bpel:variable element="aeid:emptyElement" name="gNil">
         <bpel:from>
            <bpel:literal>
               <nilElement xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl" xsi:nil="true"/>
            </bpel:literal>
         </bpel:from>
      </bpel:variable>
      <bpel:variable element="tsw:scheduleWakeupResponse" name="gScheduleWakeupResponse">
         <bpel:from variable="gNil"/>
      </bpel:variable>
      <bpel:variable element="trt:interfaceMetadata" name="gInterfaceMetadata"/>
      <bpel:variable name="gDelegation" type="htd:tDelegation"/>
      <bpel:variable element="trt:renderings" name="gRenderings">
         <bpel:from>
            <bpel:literal>
               <empty/>
            </bpel:literal>
         </bpel:from>
      </bpel:variable>
      <bpel:variable name="gNextCommentId" type="xsd:int">
         <bpel:from>
            <bpel:literal>1</bpel:literal>
         </bpel:from>
      </bpel:variable>
      <bpel:variable name="gPresentationElements" type="htd:tPresentationElements"/>
      <bpel:variable element="trt:processVariables" name="gProcessVariables"/>
      <bpel:variable element="trt:newAttachmentsList" name="gAttachments">
         <bpel:from>
            <bpel:literal>
               <empty/>
            </bpel:literal>
         </bpel:from>
      </bpel:variable>
      <bpel:variable name="gIsTask" type="xsd:boolean"/>
      <bpel:variable element="trt:taskInstance" name="gParentTaskInstance">
         <bpel:from>
            <bpel:literal>
               <empty/>
            </bpel:literal>
         </bpel:from>
      </bpel:variable>
      <bpel:variable name="gRemovalCalls" type="xsd:int">
         <bpel:from>
            <bpel:literal>0</bpel:literal>
         </bpel:from>
      </bpel:variable>
      <bpel:variable name="gAttachmentPropagation" type="xsd:string"/>
      <bpel:variable name="gFinalizationDeadline" type="xsd:dateTime">
         <bpel:from>(current-dateTime() + xs:yearMonthDuration(xs:duration('P500Y'))) + xs:dayTimeDuration(xs:duration('P500Y'))</bpel:from>
      </bpel:variable>
      <bpel:variable name="gFinalizationDeadlineSet" type="xsd:boolean">
         <bpel:from>
            <bpel:literal>false</bpel:literal>
         </bpel:from>
      </bpel:variable>
   </bpel:variables>
   <bpel:correlationSets>
      <bpel:correlationSet name="CS1" properties="tc:identifier"/>
   </bpel:correlationSets>
   <bpel:sequence>
      <bpel:scope name="Initial">
         <bpel:variables>
            <bpel:variable element="tsw:createTaskResponse" name="createTaskResponse"/>
            <bpel:variable name="hasActivationTime" type="xsd:boolean"/>
            <bpel:variable name="hasExpirationTime" type="xsd:boolean"/>
            <bpel:variable element="tsw:createTaskRequest" name="createTask"/>
            <bpel:variable name="status" type="htapi:tStatus">
               <bpel:from>
                  <bpel:literal>CREATED</bpel:literal>
               </bpel:from>
            </bpel:variable>
            <bpel:variable name="owner" type="xsd:string"/>
            <bpel:variable name="taskId" type="xsd:anyURI"/>
            <bpel:variable element="store:storeTaskData" name="storeTask"/>
            <bpel:variable name="attachmentCustomFunctionResult" type="xsd:string"/>
         </bpel:variables>
         <bpel:sequence>
            <bpel:receive createInstance="yes" name="CreateTask" operation="create" partnerLink="internal" variable="createTask"/>
            <bpel:assign name="InitLocals">
               <bpel:copy>
                  <bpel:from>exists( $createTask/htd:task )</bpel:from>
                  <bpel:to variable="gIsTask"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>count($createTask/trt:initialState/htp:humanTaskContext/htp:deferActivationTime) = 1</bpel:from>
                  <bpel:to variable="hasActivationTime"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>count($createTask/trt:initialState/htp:humanTaskContext/htp:expirationTime) = 1</bpel:from>
                  <bpel:to variable="hasExpirationTime"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>if ($gIsTask) then&#13;
concat('urn:b4p:',abx:getProcessId())&#13;
else&#13;
concat('urn:b4pn:',abx:getProcessId())</bpel:from>
                  <bpel:to variable="taskId"/>
               </bpel:copy>
            </bpel:assign>
            <bpel:if>
               <bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">count( $createTask/sref:service-ref ) = 1</bpel:condition>
               <bpel:assign name="addListener">
                  <bpel:copy>
                     <bpel:from>&lt;list&gt;&#13;
{ $gListenerList/tewt:taskListener }&#13;
&lt;tewt:taskListener&gt;&#13;
   &lt;tewt:listenerId&gt;{ $gNextListenerId }&lt;/tewt:listenerId&gt;&#13;
   { $createTask/sref:service-ref }&#13;
&lt;/tewt:taskListener&gt;&#13;
&lt;/list&gt;</bpel:from>
                     <bpel:to variable="gListenerList"/>
                  </bpel:copy>
                  <bpel:copy>
                     <bpel:from>$gNextListenerId + 1</bpel:from>
                     <bpel:to variable="gNextListenerId"/>
                  </bpel:copy>
               </bpel:assign>
            </bpel:if>
            <bpel:if name="DeferActivation">
               <bpel:condition>$hasActivationTime</bpel:condition>
               <bpel:assign name="SetDeferActivation">
                  <bpel:copy>
                     <bpel:from>$createTask/trt:initialState/htp:humanTaskContext/htp:deferActivationTime</bpel:from>
                     <bpel:to variable="gDeferActivation"/>
                  </bpel:copy>
               </bpel:assign>
               <bpel:else>
                  <bpel:assign name="MarkAsReady">
                     <bpel:copy>
                        <bpel:from>
                           <bpel:literal>READY</bpel:literal>
                        </bpel:from>
                        <bpel:to variable="status"/>
                     </bpel:copy>
                  </bpel:assign>
               </bpel:else>
            </bpel:if>
            <bpel:if name="Expiration">
               <bpel:condition>$hasExpirationTime</bpel:condition>
               <bpel:assign name="SetExpiration">
                  <bpel:copy>
                     <bpel:from>$createTask/trt:initialState/htp:humanTaskContext/htp:expirationTime</bpel:from>
                     <bpel:to variable="gExpiration"/>
                  </bpel:copy>
               </bpel:assign>
            </bpel:if>
            <bpel:if name="AutoClaim">
               <bpel:condition>$createTask/htd:task and&#13;
$status = 'READY' and count($createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:potentialOwners/htd:organizationalEntity/htd:users/htd:user) = 1&#13;
and&#13;
count( $createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:excludedOwners/* ) = 0</bpel:condition>
               <bpel:assign name="AutoClaim">
                  <bpel:copy>
                     <bpel:from>
                        <bpel:literal>RESERVED</bpel:literal>
                     </bpel:from>
                     <bpel:to variable="status"/>
                  </bpel:copy>
                  <bpel:copy>
                     <bpel:from>$createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:potentialOwners/htd:organizationalEntity/htd:users/htd:user</bpel:from>
                     <bpel:to variable="owner"/>
                  </bpel:copy>
               </bpel:assign>
            </bpel:if>
            <bpel:assign name="PrepareResponse">
               <bpel:copy ignoreMissingFromData="yes">
                  <bpel:from>$createTask/trt:taskInstance</bpel:from>
                  <bpel:to variable="gParentTaskInstance"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>if ($gIsTask) then&#13;
$createTask/htd:task/htd:presentationElements&#13;
else&#13;
$createTask/htd:notification/htd:presentationElements</bpel:from>
                  <bpel:to variable="gPresentationElements"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>if (exists($createTask/trt:initialState/trt:processVariables)) then $createTask/trt:initialState/trt:processVariables&#13;
else &lt;empty/&gt;</bpel:from>
                  <bpel:to variable="gProcessVariables"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>let $taskName := if ($gIsTask) then data($createTask/htd:task/@name) else data($createTask/htd:notification/@name)&#13;
let $taskType := if ($gIsTask) then 'TASK' else 'NOTIFICATION'&#13;
let $taskInitiator := if (exists($createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:taskInitiator//htd:user)) then data($createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:taskInitiator//htd:user)&#13;
else 'anonymous'&#13;
&#13;
return&#13;
&lt;trt:taskInstance xmlns:htapi="http://www.example.org/WS-HT/api" xmlns:htd="http://www.example.org/WS-HT" xmlns:trt="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-rt.xsd" &gt;&#13;
   &lt;trt:identifier&gt;{ $taskId }&lt;/trt:identifier&gt;&#13;
   &lt;trt:name&gt;{$taskName}&lt;/trt:name&gt;&#13;
   &lt;trt:targetNamespace&gt;&lt;/trt:targetNamespace&gt;&#13;
   &lt;trt:taskType&gt;{$taskType}&lt;/trt:taskType&gt;&#13;
   &lt;trt:presentation/&gt;&#13;
   &lt;trt:context&gt;&#13;
      &lt;trt:status&gt;{ $status }&lt;/trt:status&gt;&#13;
      &lt;trt:priority&gt;{ data($createTask/trt:initialState/htp:humanTaskContext/htp:priority) }&lt;/trt:priority&gt;&#13;
&#13;
&lt;trt:taskInitiator&gt;{$taskInitiator}&lt;/trt:taskInitiator&gt;&#13;
{&#13;
(:  TASK STAKEHOLDERS :)&#13;
if ( exists($createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:taskStakeholders/htd:organizationalEntity) ) then&#13;
&lt;trt:taskStakeholders&gt;{ $createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:taskStakeholders/htd:organizationalEntity/* }&lt;/trt:taskStakeholders&gt;&#13;
else &lt;trt:taskStakeholders xsi:nil="true"/&gt;&#13;
}&#13;
{&#13;
(:  POTENTIAL OWNERS :)&#13;
if ( exists($createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:potentialOwners/htd:organizationalEntity) ) then&#13;
&lt;trt:potentialOwners&gt;{ $createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:potentialOwners/htd:organizationalEntity/* }&lt;/trt:potentialOwners&gt;&#13;
else &lt;trt:potentialOwners xsi:nil="true"/&gt;&#13;
}&#13;
{&#13;
(:  EXCLUDED OWNERS :)&#13;
if ( exists($createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:excludedOwners/htd:organizationalEntity) ) then&#13;
&lt;trt:excludedOwners&gt;{ $createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:excludedOwners/htd:organizationalEntity/* }&lt;/trt:excludedOwners&gt;&#13;
else &lt;trt:excludedOwners xsi:nil="true"/&gt;&#13;
}&#13;
{&#13;
(: BUSINESS ADMINISTRATORS :)&#13;
if ( exists($createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:businessAdministrators/htd:organizationalEntity) ) then&#13;
&lt;trt:businessAdministrators&gt;{ $createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:businessAdministrators/htd:organizationalEntity/* }&lt;/trt:businessAdministrators&gt;&#13;
else &lt;trt:businessAdministrators xsi:nil="true"/&gt;&#13;
}&#13;
{&#13;
(: RECIPIENTS :)&#13;
if ( exists($createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:recipients/htd:organizationalEntity) ) then&#13;
&lt;trt:recipients&gt;{ $createTask/trt:initialState/htp:humanTaskContext/htp:peopleAssignments/htp:recipients/htd:organizationalEntity/* }&lt;/trt:recipients&gt;&#13;
else &lt;trt:recipients xsi:nil="true"/&gt;&#13;
}&#13;
{&#13;
(: ACTUAL OWNER :)&#13;
if ( $status = 'RESERVED' ) then&#13;
&lt;trt:actualOwner&gt;{ $owner }&lt;/trt:actualOwner&gt;&#13;
else &lt;trt:actualOwner xsi:nil="true"/&gt;&#13;
}&#13;
   &lt;trt:createdOn&gt;{ current-dateTime() }&lt;/trt:createdOn&gt;&#13;
{ &#13;
(: CREATED_BY :)&#13;
&#13;
   let $createdBy := data($createTask/trt:initialState/trt:createdBy)&#13;
   let $effectiveCreatedBy := if ($createdBy = 'anonymous') then $taskInitiator else $createdBy&#13;
   return &#13;
   &lt;trt:createdBy&gt;{$effectiveCreatedBy}&lt;/trt:createdBy&gt;&#13;
}&#13;
   &lt;trt:activationTime&gt;{ if ($hasActivationTime) then $gDeferActivation else current-dateTime()  }&lt;/trt:activationTime&gt;&#13;
&#13;
{&#13;
(: EXPIRATION TIME :)&#13;
if ($hasExpirationTime) then&#13;
      &lt;trt:expirationTime&gt;{ $gExpiration }&lt;/trt:expirationTime&gt;&#13;
else ()&#13;
}&#13;
      &lt;trt:lastModifiedTime xsi:nil="true"/&gt;&#13;
      &lt;trt:lastModifiedBy xsi:nil="true"/&gt;&#13;
      &lt;trt:completionTime xsi:nil="true"/&gt;&#13;
      &lt;trt:isSkipable&gt;&#13;
	{ &#13;
		if (exists( $createTask/trt:initialState/htp:humanTaskContext/htp:isSkipable ) ) then &#13;
			data($createTask/trt:initialState/htp:humanTaskContext/htp:isSkipable)&#13;
		else 'false'&#13;
	}&#13;
	&lt;/trt:isSkipable&gt;&#13;
      &lt;trt:lastEscalatedTime xsi:nil="true"/&gt;&#13;
      {&#13;
	if (exists( $createTask/htd:task/htd:searchBy )) then&#13;
		&lt;trt:primarySearchBy/&gt;&#13;
	else ()&#13;
      }&#13;
&#13;
      {&#13;
	if (exists( $createTask/trt:initialState/trt:startBy ) ) then &#13;
        	&lt;trt:startByMillis&gt;&#13;
                {&#13;
                   data($createTask/trt:initialState/trt:startBy)&#13;
                }&#13;
                &lt;/trt:startByMillis&gt;&#13;
        else ()&#13;
      }&#13;
&#13;
      {&#13;
	if (exists( $createTask/trt:initialState/trt:completeBy ) ) then &#13;
        	&lt;trt:completeByMillis&gt;&#13;
                {&#13;
                   data($createTask/trt:initialState/trt:completeBy)&#13;
                }&#13;
                &lt;/trt:completeByMillis&gt;&#13;
        else ()&#13;
      }&#13;
&#13;
&#13;
   &lt;/trt:context&gt;&#13;
   &lt;trt:operational&gt;&#13;
	{ $createTask/trt:initialState/trt:input }&#13;
      &lt;trt:output xsi:nil="true" /&gt;&#13;
      &lt;trt:fault xsi:nil="true" /&gt;&#13;
      &lt;trt:comments/&gt;&#13;
      &lt;trt:attachments/&gt;&#13;
   &lt;/trt:operational&gt;&#13;
&lt;/trt:taskInstance&gt;</bpel:from>
                  <bpel:to variable="gTaskInstance"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>&lt;tsw:createTaskResponse xmlns:tew="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-events-wsdl.xsd" xmlns:tsw="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-state-wsdl.xsd"&gt;&#13;
   &lt;trt:identifier&gt;{ $taskId }&lt;/trt:identifier&gt;&#13;
   { &#13;
	if (count( $createTask/sref:service-ref ) = 1) then &#13;
	$gListenerList/tewt:taskListener/tewt:listenerId[1]&#13;
	else ()&#13;
   }&#13;
   &lt;tsw:state&gt;{ $status }&lt;/tsw:state&gt;&#13;
   { $gTaskInstance }&#13;
&lt;/tsw:createTaskResponse&gt;</bpel:from>
                  <bpel:to variable="createTaskResponse"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>&lt;store:storeTaskData xmlns:htapi="http://www.example.org/WS-HT/api" xmlns:htd="http://www.example.org/WS-HT" xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-storage.wsdl" xmlns:trt="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-rt.xsd"&gt;&#13;
   &lt;store:processId&gt;{ abx:getProcessId() }&lt;/store:processId&gt;&#13;
{ $gTaskInstance }&#13;
   &lt;store:update&gt;false&lt;/store:update&gt;&#13;
&lt;/store:storeTaskData&gt;</bpel:from>
                  <bpel:to variable="storeTask"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>let $presentationElements := &lt;htd:presentationElements&gt;{ $gPresentationElements/* }&lt;/htd:presentationElements&gt;&#13;
return&#13;
trt:evalTaskPresentationElements( $presentationElements , $gProcessVariables, $gTaskInstance, $gParentTaskInstance )</bpel:from>
                  <bpel:to variable="storeTask">
                     <bpel:query>trt:taskInstance/trt:presentation</bpel:query>
                  </bpel:to>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>$createTask/trt:interfaceMetadata</bpel:from>
                  <bpel:to variable="gInterfaceMetadata"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>if ( exists( $createTask/htd:task/htd:delegation ) ) then&#13;
	$createTask/htd:task/htd:delegation&#13;
else&#13;
$gNil</bpel:from>
                  <bpel:to variable="gDelegation"/>
               </bpel:copy>
               <bpel:copy ignoreMissingFromData="yes">
                  <bpel:from>if ($gIsTask) then &#13;
$createTask/htd:task/htd:renderings&#13;
else &#13;
$createTask/htd:notification/htd:renderings</bpel:from>
                  <bpel:to variable="gRenderings"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>abx:copyAllAttachments( 'createTask' , 'gAttachments' )</bpel:from>
                  <bpel:to variable="attachmentCustomFunctionResult"/>
               </bpel:copy>
               <bpel:copy ignoreMissingFromData="yes">
                  <bpel:from>if (exists( $gTaskInstance/trt:context/trt:primarySearchBy )) then&#13;
   trt:eval($createTask/htd:task/htd:searchBy, $createTask/trt:initialState/trt:processVariables, $gTaskInstance)&#13;
else ()</bpel:from>
                  <bpel:to variable="gTaskInstance">
                     <bpel:query>trt:context/trt:primarySearchBy</bpel:query>
                  </bpel:to>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>if (exists($createTask/trt:initialState/htp:humanTaskContext/htp:attachments/htp:returnAttachments)) then&#13;
data($createTask/trt:initialState/htp:humanTaskContext/htp:attachments/htp:returnAttachments)&#13;
else 'none'</bpel:from>
                  <bpel:to variable="gAttachmentPropagation"/>
               </bpel:copy>
               <bpel:copy ignoreMissingFromData="yes">
                  <bpel:from>if (exists( $gTaskInstance/trt:context/trt:primarySearchBy )) then&#13;
   trt:eval($createTask/htd:task/htd:searchBy, $createTask/trt:initialState/trt:processVariables, $gTaskInstance)&#13;
else ()</bpel:from>
                  <bpel:to variable="storeTask">
                     <bpel:query>trt:taskInstance/trt:context/trt:primarySearchBy</bpel:query>
                  </bpel:to>
               </bpel:copy>
            </bpel:assign>
            <bpel:scope>
               <bpel:faultHandlers>
                  <bpel:catchAll>
                     <bpel:empty/>
                  </bpel:catchAll>
               </bpel:faultHandlers>
               <bpel:invoke inputVariable="storeTask" name="StoreTask" operation="storeTask" partnerLink="storagePL"/>
            </bpel:scope>
            <bpel:reply name="CreateTaskReply" operation="create" partnerLink="internal" variable="createTaskResponse">
               <bpel:correlations>
                  <bpel:correlation initiate="yes" set="CS1"/>
               </bpel:correlations>
            </bpel:reply>
         </bpel:sequence>
      </bpel:scope>
      <bpel:scope name="Main">
         <bpel:eventHandlers>
            <bpel:onEvent element="htdt:getAttachmentInfos" operation="getAttachmentInfos" partnerLink="taskOperations-getAttachmentInfos" variable="getAttachmentInfos">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CS1"/>
               </bpel:correlations>
               <bpel:scope name="GetAttachmentInfos">
                  <bpel:partnerLinks>
                     <bpel:partnerLink myRole="process" name="taskOperations-getAttachmentInfos" partnerLinkType="ts:taskOperationsPLT"/>
                  </bpel:partnerLinks>
                  <bpel:variables>
                     <bpel:variable element="htdt:getAttachmentInfosResponse" name="getAttachmentInfosResponse"/>
                  </bpel:variables>
                  <bpel:flow>
                     <bpel:links>
                        <bpel:link name="L143"/>
                     </bpel:links>
                     <bpel:assign name="PrepareResponse">
                        <bpel:sources>
                           <bpel:source linkName="L143"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from>&lt;htdt:getAttachmentInfosResponse xmlns:htapi="http://www.example.org/WS-HT/api" xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
{&#13;
   for $attachmentInfo in trt:getHTAttachments('gAttachments')//htapi:attachmentInfo&#13;
   return&#13;
   &lt;htdt:info&gt;&#13;
      {$attachmentInfo/*}&#13;
   &lt;/htdt:info&gt;&#13;
}&#13;
&lt;/htdt:getAttachmentInfosResponse&gt;</bpel:from>
                           <bpel:to variable="getAttachmentInfosResponse"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:reply operation="getAttachmentInfos" partnerLink="taskOperations-getAttachmentInfos" variable="getAttachmentInfosResponse">
                        <bpel:targets>
                           <bpel:target linkName="L143"/>
                        </bpel:targets>
                     </bpel:reply>
                  </bpel:flow>
               </bpel:scope>
            </bpel:onEvent>
            <bpel:onEvent element="htdt:getAttachments" operation="getAttachments" partnerLink="taskOperations-getAttachments" variable="getAttachments">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CS1"/>
               </bpel:correlations>
               <bpel:scope name="GetAttachments">
                  <bpel:partnerLinks>
                     <bpel:partnerLink myRole="process" name="taskOperations-getAttachments" partnerLinkType="ts:taskOperationsPLT"/>
                  </bpel:partnerLinks>
                  <bpel:variables>
                     <bpel:variable element="htdt:getAttachmentsResponse" name="getAttachmentsResponse">
                        <bpel:from>
                           <bpel:literal>
                              <empty/>
                           </bpel:literal>
                        </bpel:from>
                     </bpel:variable>
                     <bpel:variable name="principal" type="xsd:string"/>
                     <bpel:variable element="aeid:principalQueryAssertion" name="assertionInput"/>
                     <bpel:variable element="htdt:illegalArgument" name="illegalArgumentFault"/>
                     <bpel:variable element="htdt:illegalAccess" name="illegalAccessFault"/>
                  </bpel:variables>
                  <bpel:faultHandlers>
                     <bpel:catch faultName="aeid:searchFault">
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L147"/>
                           </bpel:links>
                           <bpel:assign name="illegalAccess">
                              <bpel:sources>
                                 <bpel:source linkName="L147"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>User is not authorized to get an attachment.</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="illegalAccessFault"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:reply faultName="htaw:illegalAccessFault" operation="getAttachments" partnerLink="taskOperations-getAttachments" variable="illegalAccessFault">
                              <bpel:targets>
                                 <bpel:target linkName="L147"/>
                              </bpel:targets>
                           </bpel:reply>
                        </bpel:flow>
                     </bpel:catch>
                  </bpel:faultHandlers>
                  <bpel:flow>
                     <bpel:links>
                        <bpel:link name="L149"/>
                        <bpel:link name="L116_2"/>
                        <bpel:link name="L114_1"/>
                     </bpel:links>
                     <bpel:assign name="prepareResponse">
                        <bpel:targets>
                           <bpel:target linkName="L116_2"/>
                        </bpel:targets>
                        <bpel:sources>
                           <bpel:source linkName="L149"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from>&lt;htdt:getAttachmentsResponse xmlns:htapi="http://www.example.org/WS-HT/api" xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
{&#13;
for $attachment in trt:copyHTAttachmentsByName('gAttachments', 'getAttachmentsResponse', data($getAttachments/htdt:attachmentName) )/htapi:attachment&#13;
return &#13;
&lt;htdt:attachment&gt;&#13;
{$attachment/htapi:attachmentInfo}&#13;
{$attachment/htapi:value}&#13;
&lt;/htdt:attachment&gt;&#13;
}&#13;
&lt;/htdt:getAttachmentsResponse&gt;</bpel:from>
                           <bpel:to variable="getAttachmentsResponse">
                              <bpel:query>/</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:if>
                        <bpel:targets>
                           <bpel:target linkName="L114_1"/>
                        </bpel:targets>
                        <bpel:sources>
                           <bpel:source linkName="L116_2"/>
                        </bpel:sources>
                        <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L115_2"/>
                           </bpel:links>
                           <bpel:assign name="PrepAssertion">
                              <bpel:sources>
                                 <bpel:source linkName="L115_2"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>let $taskUsers := if ($gIsTask) then $gTaskInstance/trt:context/trt:potentialOwners &#13;
else $gTaskInstance/trt:context/trt:recipients&#13;
let $taskUsersQuery := if ($gIsTask) then trt:toIdentityQuery( $taskUsers , $gTaskInstance/trt:context/trt:excludedOwners )&#13;
else trt:toIdentityQuery( $taskUsers )&#13;
&#13;
return&#13;
&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   { $taskUsersQuery }&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                 <bpel:to variable="assertionInput"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:invoke inputVariable="assertionInput" name="AssertPotentialOwnerOrAdmin-getAttachments" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                              <bpel:targets>
                                 <bpel:target linkName="L115_2"/>
                              </bpel:targets>
                           </bpel:invoke>
                        </bpel:flow>
                     </bpel:if>
                     <bpel:if>
                        <bpel:targets>
                           <bpel:target linkName="L149"/>
                        </bpel:targets>
                        <bpel:condition>not(exists( $getAttachmentsResponse/htdt:attachment ))</bpel:condition>
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L146"/>
                           </bpel:links>
                           <bpel:assign name="illegalArgument">
                              <bpel:sources>
                                 <bpel:source linkName="L146"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>No attachments with that name.</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="illegalArgumentFault"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:reply faultName="htaw:illegalArgumentFault" operation="getAttachments" partnerLink="taskOperations-getAttachments" variable="illegalArgumentFault">
                              <bpel:targets>
                                 <bpel:target linkName="L146"/>
                              </bpel:targets>
                           </bpel:reply>
                        </bpel:flow>
                        <bpel:else>
                           <bpel:reply operation="getAttachments" partnerLink="taskOperations-getAttachments" variable="getAttachmentsResponse"/>
                        </bpel:else>
                     </bpel:if>
                     <bpel:assign name="setPrincipal">
                        <bpel:sources>
                           <bpel:source linkName="L114_1"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from>string(abx:getMyRoleProperty('taskOperations-getAttachments','getAttachments', 'abx:principal'))</bpel:from>
                           <bpel:to variable="principal"/>
                        </bpel:copy>
                     </bpel:assign>
                  </bpel:flow>
               </bpel:scope>
            </bpel:onEvent>
            <bpel:onEvent element="tsw:getAttachmentById" operation="getAttachmentById" partnerLink="aeTaskOperations-getAttachmentById" variable="getAttachmentByIdRequest">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CS1"/>
               </bpel:correlations>
               <bpel:scope name="GetAttachmentById">
                  <bpel:partnerLinks>
                     <bpel:partnerLink myRole="process" name="aeTaskOperations-getAttachmentById" partnerLinkType="ts:aeTaskOperationsPLT"/>
                  </bpel:partnerLinks>
                  <bpel:variables>
                     <bpel:variable element="tsw:getAttachmentByIdResponse" name="getAttachmentByIdResponse">
                        <bpel:from>
                           <bpel:literal>
                              <empty/>
                           </bpel:literal>
                        </bpel:from>
                     </bpel:variable>
                     <bpel:variable name="principal" type="xsd:string"/>
                     <bpel:variable element="aeid:principalQueryAssertion" name="assertionInput"/>
                     <bpel:variable element="htdt:illegalArgument" name="illegalArgumentFault"/>
                     <bpel:variable element="htdt:illegalAccess" name="illegalAccessFault"/>
                  </bpel:variables>
                  <bpel:faultHandlers>
                     <bpel:catch faultName="aeid:searchFault">
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L147_1"/>
                           </bpel:links>
                           <bpel:assign name="illegalAccess">
                              <bpel:sources>
                                 <bpel:source linkName="L147_1"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>User is not authorized to get an attachment.</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="illegalAccessFault"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:reply faultName="htaw:illegalAccessFault" operation="getAttachmentById" partnerLink="aeTaskOperations-getAttachmentById" variable="illegalAccessFault">
                              <bpel:targets>
                                 <bpel:target linkName="L147_1"/>
                              </bpel:targets>
                           </bpel:reply>
                        </bpel:flow>
                     </bpel:catch>
                  </bpel:faultHandlers>
                  <bpel:flow>
                     <bpel:links>
                        <bpel:link name="L116_2_1"/>
                        <bpel:link name="L114_1_1"/>
                        <bpel:link name="L149_1"/>
                     </bpel:links>
                     <bpel:if>
                        <bpel:targets>
                           <bpel:target linkName="L114_1_1"/>
                        </bpel:targets>
                        <bpel:sources>
                           <bpel:source linkName="L116_2_1"/>
                        </bpel:sources>
                        <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L115_2_1"/>
                           </bpel:links>
                           <bpel:assign name="PrepAssertion">
                              <bpel:sources>
                                 <bpel:source linkName="L115_2_1"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>let $taskUsers := if ($gIsTask) then $gTaskInstance/trt:context/trt:potentialOwners &#13;
else $gTaskInstance/trt:context/trt:recipients&#13;
let $taskUsersQuery := if ($gIsTask) then trt:toIdentityQuery( $taskUsers , $gTaskInstance/trt:context/trt:excludedOwners )&#13;
else trt:toIdentityQuery( $taskUsers )&#13;
&#13;
return&#13;
&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   { $taskUsersQuery }&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                 <bpel:to variable="assertionInput"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:invoke inputVariable="assertionInput" name="AssertPotentialOwnerOrAdmin-getAttachmentById" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                              <bpel:targets>
                                 <bpel:target linkName="L115_2_1"/>
                              </bpel:targets>
                           </bpel:invoke>
                        </bpel:flow>
                     </bpel:if>
                     <bpel:if>
                        <bpel:targets>
                           <bpel:target linkName="L149_1"/>
                        </bpel:targets>
                        <bpel:condition>not(exists( $getAttachmentByIdResponse/* ))</bpel:condition>
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L146_1"/>
                           </bpel:links>
                           <bpel:assign name="illegalArgument">
                              <bpel:sources>
                                 <bpel:source linkName="L146_1"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>No attachments with that id.</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="illegalArgumentFault"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:reply faultName="htaw:illegalArgumentFault" operation="getAttachmentById" partnerLink="aeTaskOperations-getAttachmentById" variable="illegalArgumentFault">
                              <bpel:targets>
                                 <bpel:target linkName="L146_1"/>
                              </bpel:targets>
                           </bpel:reply>
                        </bpel:flow>
                        <bpel:else>
                           <bpel:reply operation="getAttachmentById" partnerLink="aeTaskOperations-getAttachmentById" variable="getAttachmentByIdResponse"/>
                        </bpel:else>
                     </bpel:if>
                     <bpel:assign name="setPrincipal">
                        <bpel:sources>
                           <bpel:source linkName="L114_1_1"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from>string(abx:getMyRoleProperty('aeTaskOperations-getAttachmentById','getAttachmentById', 'abx:principal'))</bpel:from>
                           <bpel:to variable="principal"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:assign name="prepareResponse">
                        <bpel:targets>
                           <bpel:target linkName="L116_2_1"/>
                        </bpel:targets>
                        <bpel:sources>
                           <bpel:source linkName="L149_1"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from>let $attachments := trt:copyHTAttachmentById('gAttachments', 'getAttachmentByIdResponse', data( $getAttachmentByIdRequest/tsw:attachmentId ))&#13;
return&#13;
&lt;getAttachmentByIdResponse&gt;&#13;
{$attachments//htapi:attachmentInfo}&#13;
{$attachments//htapi:value}&#13;
&lt;/getAttachmentByIdResponse&gt;</bpel:from>
                           <bpel:to variable="getAttachmentByIdResponse">
                              <bpel:query>/</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                     </bpel:assign>
                  </bpel:flow>
               </bpel:scope>
            </bpel:onEvent>
            <bpel:onEvent element="htdt:getTaskInfo" operation="getTaskInfo" partnerLink="taskOperations-getTaskInfo" variable="getTaskInfo">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CS1"/>
               </bpel:correlations>
               <bpel:scope name="GetTaskInfo">
                  <bpel:partnerLinks>
                     <bpel:partnerLink myRole="process" name="taskOperations-getTaskInfo" partnerLinkType="ts:taskOperationsPLT"/>
                  </bpel:partnerLinks>
                  <bpel:variables>
                     <bpel:variable element="htdt:getTaskInfoResponse" name="getTaskInfoResponse"/>
                     <bpel:variable element="trt:taskInstance" name="taskInstance">
                        <bpel:from variable="gTaskInstance"/>
                     </bpel:variable>
                     <bpel:variable name="lang" type="xsd:string"/>
                  </bpel:variables>
                  <bpel:flow>
                     <bpel:links>
                        <bpel:link name="L96"/>
                     </bpel:links>
                     <bpel:assign name="PrepareTaskInfo">
                        <bpel:sources>
                           <bpel:source linkName="L96"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from>string(abx:getMyRoleProperty('taskOperations-getTaskInfo','getTaskInfo', 'abx:lang'))</bpel:from>
                           <bpel:to variable="lang"/>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>let $presentationElements := &lt;htd:presentationElements&gt;{ $gPresentationElements/* }&lt;/htd:presentationElements&gt;&#13;
return&#13;
trt:evalTaskPresentationElements( $presentationElements , $gProcessVariables, $taskInstance, $gParentTaskInstance, $lang )</bpel:from>
                           <bpel:to variable="taskInstance">
                              <bpel:query>trt:presentation</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>bpel:doXslTransform('project:/org.activebpel.rt.b4p.services/xsl/getTaskInfo.xsl', $taskInstance, 'lang', $lang )</bpel:from>
                           <bpel:to variable="getTaskInfoResponse"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:reply operation="getTaskInfo" partnerLink="taskOperations-getTaskInfo" variable="getTaskInfoResponse">
                        <bpel:targets>
                           <bpel:target linkName="L96"/>
                        </bpel:targets>
                     </bpel:reply>
                  </bpel:flow>
               </bpel:scope>
            </bpel:onEvent>
            <bpel:onEvent element="htdt:getTaskDescription" operation="getTaskDescription" partnerLink="taskOperations-getTaskDescription" variable="getTaskDescription">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CS1"/>
               </bpel:correlations>
               <bpel:scope name="GetTaskDescription">
                  <bpel:partnerLinks>
                     <bpel:partnerLink myRole="process" name="taskOperations-getTaskDescription" partnerLinkType="ts:taskOperationsPLT"/>
                  </bpel:partnerLinks>
                  <bpel:variables>
                     <bpel:variable element="htdt:getTaskDescriptionResponse" name="getTaskDescriptionResponse"/>
                     <bpel:variable name="lang" type="xsd:string"/>
                     <bpel:variable element="trt:taskInstance" name="taskInstance">
                        <bpel:from variable="gTaskInstance"/>
                     </bpel:variable>
                     <bpel:variable element="htdt:getTaskInfoResponse" name="getTaskInfoResponse"/>
                  </bpel:variables>
                  <bpel:sequence>
                     <bpel:assign name="PrepareTaskDescription">
                        <bpel:copy>
                           <bpel:from>string(abx:getMyRoleProperty('taskOperations-getTaskDescription','getTaskDescription', 'abx:lang'))</bpel:from>
                           <bpel:to variable="lang"/>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>let $presentationElements := &lt;htd:presentationElements&gt;{ $gPresentationElements/* }&lt;/htd:presentationElements&gt;&#13;
return&#13;
trt:evalTaskPresentationElements( $presentationElements , $gProcessVariables, $taskInstance, $gParentTaskInstance, $lang )</bpel:from>
                           <bpel:to variable="taskInstance">
                              <bpel:query>trt:presentation</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>bpel:doXslTransform('project:/org.activebpel.rt.b4p.services/xsl/getTaskDescription.xsl', $taskInstance, 'lang', $lang, 'contentType', string( $getTaskDescription/htdt:contentType ) )</bpel:from>
                           <bpel:to variable="getTaskDescriptionResponse"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:reply operation="getTaskDescription" partnerLink="taskOperations-getTaskDescription" variable="getTaskDescriptionResponse"/>
                  </bpel:sequence>
               </bpel:scope>
            </bpel:onEvent>
            <bpel:onEvent element="htdt:getInput" operation="getInput" partnerLink="taskOperations-getInput" variable="getInput">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CS1"/>
               </bpel:correlations>
               <bpel:scope name="getInput">
                  <bpel:partnerLinks>
                     <bpel:partnerLink myRole="process" name="taskOperations-getInput" partnerLinkType="ts:taskOperationsPLT"/>
                  </bpel:partnerLinks>
                  <bpel:variables>
                     <bpel:variable element="htdt:getInputResponse" name="getInputResponse"/>
                     <bpel:variable name="principal" type="xsd:string"/>
                     <bpel:variable element="aeid:principalQueryAssertion" name="assertionInput"/>
                     <bpel:variable name="partName" type="xsd:string"/>
                     <bpel:variable element="htdt:illegalArgument" name="illegalArgumentFault"/>
                     <bpel:variable element="htdt:illegalAccess" name="illegalAccessFault"/>
                  </bpel:variables>
                  <bpel:faultHandlers>
                     <bpel:catch faultName="aeid:searchFault">
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L118"/>
                           </bpel:links>
                           <bpel:reply faultName="htaw:illegalAccessFault" operation="getInput" partnerLink="taskOperations-getInput" variable="illegalAccessFault">
                              <bpel:targets>
                                 <bpel:target linkName="L118"/>
                              </bpel:targets>
                           </bpel:reply>
                           <bpel:assign name="illegalAccess">
                              <bpel:sources>
                                 <bpel:source linkName="L118"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>User does not have access to get input data.</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="illegalAccessFault"/>
                              </bpel:copy>
                           </bpel:assign>
                        </bpel:flow>
                     </bpel:catch>
                  </bpel:faultHandlers>
                  <bpel:flow>
                     <bpel:links>
                        <bpel:link name="L116"/>
                        <bpel:link name="L114"/>
                     </bpel:links>
                     <bpel:if>
                        <bpel:targets>
                           <bpel:target linkName="L116"/>
                        </bpel:targets>
                        <bpel:condition>(not(exists( $getInput/htdt:part )) and count( $gInterfaceMetadata/trt:input/trt:part ) != 1)&#13;
or&#13;
not(exists($gInterfaceMetadata/trt:input/trt:part[@name= $partName ] ))</bpel:condition>
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L117"/>
                           </bpel:links>
                           <bpel:assign name="illegalArgument">
                              <bpel:sources>
                                 <bpel:source linkName="L117"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>Part name must match a part defined for the input.</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="illegalArgumentFault"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:reply faultName="htaw:illegalArgumentFault" operation="getInput" partnerLink="taskOperations-getInput" variable="illegalArgumentFault">
                              <bpel:targets>
                                 <bpel:target linkName="L117"/>
                              </bpel:targets>
                           </bpel:reply>
                        </bpel:flow>
                        <bpel:else>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L119"/>
                              </bpel:links>
                              <bpel:assign name="prepareResponse">
                                 <bpel:sources>
                                    <bpel:source linkName="L119"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>&lt;htdt:getInputResponse xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:taskData&gt;&#13;
   { if (exists($gTaskInstance/trt:operational/trt:input/trt:part[@name=$partName]/*)) &#13;
     then $gTaskInstance/trt:operational/trt:input/trt:part[@name=$partName]/*&#13;
     else data($gTaskInstance/trt:operational/trt:input/trt:part[@name=$partName]) }&#13;
   &lt;/htdt:taskData&gt;&#13;
&lt;/htdt:getInputResponse&gt;</bpel:from>
                                    <bpel:to variable="getInputResponse"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:reply operation="getInput" partnerLink="taskOperations-getInput" variable="getInputResponse">
                                 <bpel:targets>
                                    <bpel:target linkName="L119"/>
                                 </bpel:targets>
                              </bpel:reply>
                           </bpel:flow>
                        </bpel:else>
                     </bpel:if>
                     <bpel:if>
                        <bpel:targets>
                           <bpel:target linkName="L114"/>
                        </bpel:targets>
                        <bpel:sources>
                           <bpel:source linkName="L116"/>
                        </bpel:sources>
                        <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L115"/>
                           </bpel:links>
                           <bpel:assign name="PrepAssertion">
                              <bpel:sources>
                                 <bpel:source linkName="L115"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>let $taskUsers := if ($gIsTask) then $gTaskInstance/trt:context/trt:potentialOwners &#13;
else $gTaskInstance/trt:context/trt:recipients&#13;
let $taskUsersQuery := if ($gIsTask) then trt:toIdentityQuery( $taskUsers , $gTaskInstance/trt:context/trt:excludedOwners )&#13;
else trt:toIdentityQuery( $taskUsers )&#13;
&#13;
return&#13;
&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   { $taskUsersQuery }&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                 <bpel:to variable="assertionInput"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:invoke inputVariable="assertionInput" name="AssertPotentialOwnerOrAdmin-getInput" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                              <bpel:targets>
                                 <bpel:target linkName="L115"/>
                              </bpel:targets>
                           </bpel:invoke>
                        </bpel:flow>
                     </bpel:if>
                     <bpel:assign name="setLocals">
                        <bpel:sources>
                           <bpel:source linkName="L114"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from>string(abx:getMyRoleProperty('taskOperations-getInput','getInput', 'abx:principal'))</bpel:from>
                           <bpel:to variable="principal"/>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>if ( $getInput/htdt:part ) then&#13;
$getInput/htdt:part&#13;
else&#13;
string($gInterfaceMetadata/trt:input/trt:part[1]/@name)</bpel:from>
                           <bpel:to variable="partName"/>
                        </bpel:copy>
                     </bpel:assign>
                  </bpel:flow>
               </bpel:scope>
            </bpel:onEvent>
            <bpel:onEvent element="htdt:getOutput" operation="getOutput" partnerLink="taskOperations-getOutput" variable="getOutput">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CS1"/>
               </bpel:correlations>
               <bpel:scope name="getOutput">
                  <bpel:partnerLinks>
                     <bpel:partnerLink myRole="process" name="taskOperations-getOutput" partnerLinkType="ts:taskOperationsPLT"/>
                  </bpel:partnerLinks>
                  <bpel:variables>
                     <bpel:variable element="htdt:getOutputResponse" name="getOutputResponse"/>
                     <bpel:variable name="principal" type="xsd:string"/>
                     <bpel:variable name="partName" type="xsd:string"/>
                     <bpel:variable element="aeid:principalQueryAssertion" name="assertionInput"/>
                     <bpel:variable element="htdt:illegalArgument" name="illegalArgumentFault"/>
                     <bpel:variable element="htdt:illegalAccess" name="illegalAccessFault"/>
                     <bpel:variable element="htdt:illegalState" name="illegalStateFault"/>
                  </bpel:variables>
                  <bpel:faultHandlers>
                     <bpel:catch faultName="aeid:searchFault">
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L123"/>
                           </bpel:links>
                           <bpel:assign name="illegalAccess">
                              <bpel:sources>
                                 <bpel:source linkName="L123"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>User does not have access to get output data.</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="illegalAccessFault"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:reply faultName="htaw:illegalAccessFault" operation="getOutput" partnerLink="taskOperations-getOutput" variable="illegalAccessFault">
                              <bpel:targets>
                                 <bpel:target linkName="L123"/>
                              </bpel:targets>
                           </bpel:reply>
                        </bpel:flow>
                     </bpel:catch>
                  </bpel:faultHandlers>
                  <bpel:flow>
                     <bpel:links>
                        <bpel:link name="L120"/>
                        <bpel:link name="L116_1"/>
                     </bpel:links>
                     <bpel:assign name="setLocals">
                        <bpel:sources>
                           <bpel:source linkName="L120"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from>string(abx:getMyRoleProperty('taskOperations-getOutput','getOutput', 'abx:principal'))</bpel:from>
                           <bpel:to variable="principal"/>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>if ( $getOutput/htdt:part ) then&#13;
$getOutput/htdt:part&#13;
else&#13;
string($gInterfaceMetadata/trt:output/trt:part[1]/@name)</bpel:from>
                           <bpel:to variable="partName"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:if>
                        <bpel:targets>
                           <bpel:target linkName="L120"/>
                        </bpel:targets>
                        <bpel:sources>
                           <bpel:source linkName="L116_1"/>
                        </bpel:sources>
                        <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L115_1"/>
                           </bpel:links>
                           <bpel:assign name="PrepAssertion">
                              <bpel:sources>
                                 <bpel:source linkName="L115_1"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                 <bpel:to variable="assertionInput"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-getOutput" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                              <bpel:targets>
                                 <bpel:target linkName="L115_1"/>
                              </bpel:targets>
                           </bpel:invoke>
                        </bpel:flow>
                     </bpel:if>
                     <bpel:if>
                        <bpel:targets>
                           <bpel:target linkName="L116_1"/>
                        </bpel:targets>
                        <bpel:condition>$gTaskInstance/trt:context/trt:status = 'CREATED'</bpel:condition>
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L124"/>
                           </bpel:links>
                           <bpel:assign name="IllegalState">
                              <bpel:sources>
                                 <bpel:source linkName="L124"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task has no output data in the CREATED state.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                 <bpel:to variable="illegalStateFault"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:reply faultName="htaw:illegalStateFault" operation="getOutput" partnerLink="taskOperations-getOutput" variable="illegalStateFault">
                              <bpel:targets>
                                 <bpel:target linkName="L124"/>
                              </bpel:targets>
                           </bpel:reply>
                        </bpel:flow>
                        <bpel:elseif>
                           <bpel:condition>(count( $getOutput/htdt:part ) = 0 and count( $gInterfaceMetadata/trt:output/trt:part ) != 1)&#13;
or&#13;
count( $gInterfaceMetadata/trt:output/trt:part[@name= $partName ] ) = 0</bpel:condition>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L121"/>
                              </bpel:links>
                              <bpel:assign name="illegalArgument">
                                 <bpel:sources>
                                    <bpel:source linkName="L121"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>Part name must match a part defined for the output.</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="illegalArgumentFault"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:reply faultName="htaw:illegalArgumentFault" operation="getOutput" partnerLink="taskOperations-getOutput" variable="illegalArgumentFault">
                                 <bpel:targets>
                                    <bpel:target linkName="L121"/>
                                 </bpel:targets>
                              </bpel:reply>
                           </bpel:flow>
                        </bpel:elseif>
                        <bpel:else>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L122"/>
                              </bpel:links>
                              <bpel:assign name="prepareResponse">
                                 <bpel:sources>
                                    <bpel:source linkName="L122"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>&lt;htdt:getOutputResponse xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:taskData&gt;&#13;
   { if (exists($gTaskInstance/trt:operational/trt:output/trt:part[@name=$partName]/*)) &#13;
     then $gTaskInstance/trt:operational/trt:output/trt:part[@name=$partName]/*&#13;
     else data($gTaskInstance/trt:operational/trt:output/trt:part[@name=$partName]) }&#13;
   &lt;/htdt:taskData&gt;&#13;
&lt;/htdt:getOutputResponse&gt;</bpel:from>
                                    <bpel:to variable="getOutputResponse"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:reply operation="getOutput" partnerLink="taskOperations-getOutput" variable="getOutputResponse">
                                 <bpel:targets>
                                    <bpel:target linkName="L122"/>
                                 </bpel:targets>
                              </bpel:reply>
                           </bpel:flow>
                        </bpel:else>
                     </bpel:if>
                  </bpel:flow>
               </bpel:scope>
            </bpel:onEvent>
            <bpel:onEvent element="htdt:getFault" operation="getFault" partnerLink="taskOperations-getFault" variable="getFault">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CS1"/>
               </bpel:correlations>
               <bpel:scope name="getFault">
                  <bpel:partnerLinks>
                     <bpel:partnerLink myRole="process" name="taskOperations-getFault" partnerLinkType="ts:taskOperationsPLT"/>
                  </bpel:partnerLinks>
                  <bpel:variables>
                     <bpel:variable element="htdt:getFaultResponse" name="getFaultResponse"/>
                     <bpel:variable name="principal" type="xsd:string"/>
                     <bpel:variable element="aeid:principalQueryAssertion" name="assertionInput"/>
                     <bpel:variable element="htdt:illegalState" name="illegalStateFault"/>
                     <bpel:variable element="htdt:illegalOperation" name="illegalOperationFault"/>
                     <bpel:variable element="htdt:illegalAccess" name="illegalAccessFault"/>
                  </bpel:variables>
                  <bpel:faultHandlers>
                     <bpel:catch faultName="aeid:searchFault">
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L130"/>
                           </bpel:links>
                           <bpel:assign name="illegalAccess">
                              <bpel:sources>
                                 <bpel:source linkName="L130"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>User does not have access to get fault data.</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="illegalAccessFault"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:reply faultName="htaw:illegalAccessFault" operation="getFault" partnerLink="taskOperations-getFault" variable="illegalAccessFault">
                              <bpel:targets>
                                 <bpel:target linkName="L130"/>
                              </bpel:targets>
                           </bpel:reply>
                        </bpel:flow>
                     </bpel:catch>
                  </bpel:faultHandlers>
                  <bpel:flow>
                     <bpel:links>
                        <bpel:link name="L116_1_1"/>
                        <bpel:link name="L120_1"/>
                     </bpel:links>
                     <bpel:if>
                        <bpel:targets>
                           <bpel:target linkName="L120_1"/>
                        </bpel:targets>
                        <bpel:sources>
                           <bpel:source linkName="L116_1_1"/>
                        </bpel:sources>
                        <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L115_1_1"/>
                           </bpel:links>
                           <bpel:assign name="PrepAssertion">
                              <bpel:sources>
                                 <bpel:source linkName="L115_1_1"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                 <bpel:to variable="assertionInput"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-getFault" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                              <bpel:targets>
                                 <bpel:target linkName="L115_1_1"/>
                              </bpel:targets>
                           </bpel:invoke>
                        </bpel:flow>
                     </bpel:if>
                     <bpel:if>
                        <bpel:targets>
                           <bpel:target linkName="L116_1_1"/>
                        </bpel:targets>
                        <bpel:condition>$gTaskInstance/trt:context/trt:status = 'CREATED'</bpel:condition>
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L133"/>
                           </bpel:links>
                           <bpel:assign name="IllegalState">
                              <bpel:sources>
                                 <bpel:source linkName="L133"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task has no output data in the CREATED state.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                 <bpel:to variable="illegalStateFault"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:reply faultName="htaw:illegalStateFault" operation="getFault" partnerLink="taskOperations-getFault" variable="illegalStateFault">
                              <bpel:targets>
                                 <bpel:target linkName="L133"/>
                              </bpel:targets>
                           </bpel:reply>
                        </bpel:flow>
                        <bpel:elseif>
                           <bpel:condition>not(exists($gInterfaceMetadata/trt:faults))</bpel:condition>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L132"/>
                              </bpel:links>
                              <bpel:assign name="illegalOperation">
                                 <bpel:sources>
                                    <bpel:source linkName="L132"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>Task does not define any faults.</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="illegalOperationFault"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:reply faultName="htaw:illegalOperationFault" operation="getFault" partnerLink="taskOperations-getFault" variable="illegalOperationFault">
                                 <bpel:targets>
                                    <bpel:target linkName="L132"/>
                                 </bpel:targets>
                              </bpel:reply>
                           </bpel:flow>
                        </bpel:elseif>
                        <bpel:else>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L131"/>
                              </bpel:links>
                              <bpel:assign name="prepareResponse">
                                 <bpel:sources>
                                    <bpel:source linkName="L131"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>&lt;htdt:getFaultResponse xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:faultName&gt;{data($gTaskInstance/trt:operational/trt:fault/@name)}&lt;/htdt:faultName&gt;&#13;
   &lt;htdt:faultData&gt;{$gTaskInstance/trt:operational/trt:fault/*}&lt;/htdt:faultData&gt;&#13;
&lt;/htdt:getFaultResponse&gt;</bpel:from>
                                    <bpel:to variable="getFaultResponse"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:reply operation="getFault" partnerLink="taskOperations-getFault" variable="getFaultResponse">
                                 <bpel:targets>
                                    <bpel:target linkName="L131"/>
                                 </bpel:targets>
                              </bpel:reply>
                           </bpel:flow>
                        </bpel:else>
                     </bpel:if>
                     <bpel:assign name="setPrincipal">
                        <bpel:sources>
                           <bpel:source linkName="L120_1"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from>string(abx:getMyRoleProperty('taskOperations-getFault','getFault', 'abx:principal'))</bpel:from>
                           <bpel:to variable="principal"/>
                        </bpel:copy>
                     </bpel:assign>
                  </bpel:flow>
               </bpel:scope>
            </bpel:onEvent>
            <bpel:onEvent element="tsw:getTaskInstance" operation="getInstance" partnerLink="aeTaskOperations-getInstance" variable="getTaskInstanceRequest">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CS1"/>
               </bpel:correlations>
               <bpel:scope name="aeGetInstance">
                  <bpel:partnerLinks>
                     <bpel:partnerLink myRole="process" name="aeTaskOperations-getInstance" partnerLinkType="ts:aeTaskOperationsPLT"/>
                  </bpel:partnerLinks>
                  <bpel:variables>
                     <bpel:variable element="trt:taskInstance" name="taskInstance"/>
                     <bpel:variable name="principal" type="xsd:string"/>
                     <bpel:variable name="isOwner" type="xsd:boolean"/>
                     <bpel:variable name="isAdmin" type="xsd:boolean">
                        <bpel:from>false()</bpel:from>
                     </bpel:variable>
                     <bpel:variable element="aeid:principalQueryAssertionWithResponse" name="assertionInput"/>
                     <bpel:variable name="state" type="xsd:string"/>
                     <bpel:variable name="lang" type="xsd:string"/>
                     <bpel:variable element="htdt:illegalAccess" name="illegalAccessFault"/>
                     <bpel:variable name="isTaskInitiator" type="xsd:boolean">
                        <bpel:from>false()</bpel:from>
                     </bpel:variable>
                     <bpel:variable element="trt:permissions" name="permissions"/>
                     <bpel:variable name="isAdminOrPotentialOwner" type="xsd:boolean">
                        <bpel:from>false()</bpel:from>
                     </bpel:variable>
                  </bpel:variables>
                  <bpel:faultHandlers>
                     <bpel:catch faultName="aeid:searchFault">
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="L134"/>
                           </bpel:links>
                           <bpel:assign>
                              <bpel:sources>
                                 <bpel:source linkName="L134"/>
                              </bpel:sources>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>User is not authorized to get task instance.</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="illegalAccessFault"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:reply faultName="ts:illegalAccessFault" operation="getInstance" partnerLink="aeTaskOperations-getInstance" variable="illegalAccessFault">
                              <bpel:targets>
                                 <bpel:target linkName="L134"/>
                              </bpel:targets>
                           </bpel:reply>
                        </bpel:flow>
                     </bpel:catch>
                  </bpel:faultHandlers>
                  <bpel:flow>
                     <bpel:links>
                        <bpel:link name="L97"/>
                        <bpel:link name="L101"/>
                        <bpel:link name="L98"/>
                        <bpel:link name="L98_1"/>
                        <bpel:link name="L99"/>
                     </bpel:links>
                     <bpel:assign name="setLocals">
                        <bpel:sources>
                           <bpel:source linkName="L97"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from>string(abx:getMyRoleProperty('aeTaskOperations-getInstance','getInstance', 'abx:principal'))</bpel:from>
                           <bpel:to variable="principal"/>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>string(abx:getMyRoleProperty('aeTaskOperations-getInstance','getInstance', 'abx:lang'))</bpel:from>
                           <bpel:to variable="lang"/>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from variable="gTaskInstance"/>
                           <bpel:to variable="taskInstance"/>
                        </bpel:copy>
                        <bpel:copy keepSrcElementName="yes">
                           <bpel:from>trt:getHTAttachments('gAttachments')</bpel:from>
                           <bpel:to variable="taskInstance">
                              <bpel:query>trt:operational/trt:attachments</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>let $presentationElements := &lt;htd:presentationElements&gt;{ $gPresentationElements/* }&lt;/htd:presentationElements&gt;&#13;
return&#13;
trt:evalTaskPresentationElements( $presentationElements , $gProcessVariables, $taskInstance, $gParentTaskInstance, $lang )</bpel:from>
                           <bpel:to variable="taskInstance">
                              <bpel:query>trt:presentation</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>$principal = $gTaskInstance/trt:context/trt:actualOwner</bpel:from>
                           <bpel:to variable="isOwner"/>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>$gTaskInstance/trt:context/trt:status</bpel:from>
                           <bpel:to variable="state"/>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>$gTaskInstance/trt:context/trt:taskInitiator and ($principal = $gTaskInstance/trt:context/trt:taskInitiator)</bpel:from>
                           <bpel:to variable="isTaskInitiator"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:if>
                        <bpel:targets>
                           <bpel:target linkName="L97"/>
                        </bpel:targets>
                        <bpel:sources>
                           <bpel:source linkName="L101"/>
                        </bpel:sources>
                        <bpel:condition>not($isOwner)</bpel:condition>
                        <bpel:scope>
                           <bpel:variables>
                              <bpel:variable element="aeid:assertionQueryResponse" name="queryResults"/>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catchAll>
                                 <bpel:if>
                                    <bpel:condition>not($isTaskInitiator)</bpel:condition>
                                    <bpel:rethrow/>
                                 </bpel:if>
                              </bpel:catchAll>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L102"/>
                                 <bpel:link name="L110"/>
                              </bpel:links>
                              <bpel:invoke inputVariable="assertionInput" name="AssertAdminOrPotentialOwner-aeGetTaskInstance" operation="assertPrincipalInQueryResultWithResponse" outputVariable="queryResults" partnerLink="identityPL">
                                 <bpel:targets>
                                    <bpel:target linkName="L110"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L98">
                                       <bpel:transitionCondition>$queryResults = 1</bpel:transitionCondition>
                                    </bpel:source>
                                    <bpel:source linkName="L102"/>
                                 </bpel:sources>
                              </bpel:invoke>
                              <bpel:assign name="PrepAssertion">
                                 <bpel:sources>
                                    <bpel:source linkName="L110"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>let $taskUsers := if ($gIsTask) then $gTaskInstance/trt:context/trt:potentialOwners &#13;
else $gTaskInstance/trt:context/trt:recipients&#13;
let $taskUsersQuery := if ($gIsTask) then trt:toIdentityQuery( $taskUsers , $gTaskInstance/trt:context/trt:excludedOwners )&#13;
else trt:toIdentityQuery( $taskUsers )&#13;
&#13;
return&#13;
&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
   { $taskUsersQuery }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                    <bpel:to variable="assertionInput"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:assign name="setIsAdminOrPotentialOwner">
                                 <bpel:targets>
                                    <bpel:target linkName="L102"/>
                                 </bpel:targets>
                                 <bpel:copy>
                                    <bpel:from>true()</bpel:from>
                                    <bpel:to variable="isAdminOrPotentialOwner"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:scope>
                        <bpel:else>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L77_2_1"/>
                              </bpel:links>
                              <bpel:scope>
                                 <bpel:targets>
                                    <bpel:target linkName="L77_2_1"/>
                                 </bpel:targets>
                                 <bpel:variables>
                                    <bpel:variable element="aeid:assertionQueryResponse" name="queryResults"/>
                                 </bpel:variables>
                                 <bpel:faultHandlers>
                                    <bpel:catch faultName="aeid:searchFault">
                                       <bpel:empty name="OwnerIsNotAdmin"/>
                                    </bpel:catch>
                                 </bpel:faultHandlers>
                                 <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-aeGetTaskInstance" operation="assertPrincipalInQueryResultWithResponse" outputVariable="queryResults" partnerLink="identityPL">
                                    <bpel:sources>
                                       <bpel:source linkName="L98_1"/>
                                    </bpel:sources>
                                 </bpel:invoke>
                              </bpel:scope>
                              <bpel:assign name="PrepAssertion">
                                 <bpel:sources>
                                    <bpel:source linkName="L77_2_1"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                    <bpel:to variable="assertionInput"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:else>
                     </bpel:if>
                     <bpel:assign name="setIsAdmin">
                        <bpel:targets>
                           <bpel:target linkName="L98"/>
                           <bpel:target linkName="L98_1"/>
                        </bpel:targets>
                        <bpel:sources>
                           <bpel:source linkName="L99"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from>true()</bpel:from>
                           <bpel:to variable="isAdmin"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:sequence>
                        <bpel:targets>
                           <bpel:target linkName="L101"/>
                           <bpel:target linkName="L99"/>
                        </bpel:targets>
                        <bpel:if>
                           <bpel:condition>not ( $gIsTask )</bpel:condition>
                           <bpel:assign name="notificationPermissions">
                              <bpel:copy>
                                 <bpel:from>let $notFinal := $taskInstance/trt:context/trt:completionTime = ''&#13;
return&#13;
 &lt;trt:permissions isOwner="{$isOwner}" isBusinessAdministrator="{$isAdmin}"&gt;&#13;
   {if ($notFinal) then &lt;trt:remove/&gt; else '' }&#13;
   {if ($isAdmin and $notFinal) then &lt;trt:addAttachment/&gt; else '' }&#13;
   {if ($isAdmin and $notFinal) then &lt;trt:deleteAttachments/&gt; else ''}&#13;
   {if ($notFinal) then &lt;trt:addComment/&gt; else ''}&#13;
   &lt;trt:getAttachmentInfos/&gt;&#13;
   &lt;trt:getAttachments/&gt;&#13;
   &lt;trt:getComments/&gt;&#13;
   &lt;trt:getRendering/&gt;&#13;
   &lt;trt:getRenderingTypes/&gt;&#13;
   &lt;trt:getTaskInfo/&gt;&#13;
   &lt;trt:getTaskDescription/&gt;&#13;
   &lt;trt:getInput/&gt;&#13;
&lt;/trt:permissions&gt;</bpel:from>
                                 <bpel:to variable="permissions"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:elseif>
                              <bpel:condition>$isTaskInitiator and not ($isAdminOrPotentialOwner or $isOwner)</bpel:condition>
                              <bpel:assign name="initiatorPermissions">
                                 <bpel:copy>
                                    <bpel:from>let $notFinal := $taskInstance/trt:context/trt:completionTime = ''&#13;
return&#13;
 &lt;trt:permissions isOwner="{$isOwner}" isBusinessAdministrator="{$isAdmin}"&gt;&#13;
{if ($notFinal and $state != 'SUSPENDED' and $gTaskInstance/trt:context/trt:isSkipable = 'true' ) then &lt;trt:skip/&gt; else ''}&#13;
&lt;/trt:permissions&gt;</bpel:from>
                                    <bpel:to variable="permissions"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:elseif>
                           <bpel:else>
                              <bpel:assign name="Permissions">
                                 <bpel:copy>
                                    <bpel:from>let $hasOwner :=  $taskInstance/trt:context/trt:actualOwner != ''&#13;
let $notFinal := $taskInstance/trt:context/trt:completionTime = ''&#13;
let $isSuspendOk := $state = 'READY' or( ($state = 'RESERVED' or $state = 'IN_PROGRESS' ) and ($isOwner or $isAdmin))&#13;
let $isNotification := false()&#13;
let $isOwnerInProgress := $isOwner and $state = 'IN_PROGRESS'&#13;
let $isOwnerOrAdminNotFinal := ($isOwner or $isAdmin) and $notFinal&#13;
&#13;
return&#13;
 &lt;trt:permissions isOwner="{$isOwner}" isBusinessAdministrator="{$isAdmin}"&gt;&#13;
{if ($state = 'READY') then &lt;trt:claim/&gt; else ''}&#13;
{if ($state = 'READY' or ($isOwner and $state = 'RESERVED') ) then &lt;trt:start/&gt; else ''}&#13;
{if ($state = 'IN_PROGRESS' and $isOwnerOrAdminNotFinal) then &lt;trt:stop/&gt; else ''}&#13;
{if (($state = 'IN_PROGRESS' or $state = 'RESERVED') and $isOwnerOrAdminNotFinal) then &lt;trt:release/&gt; else ''}&#13;
{if ($isSuspendOk) then &lt;trt:suspend/&gt; else '' }&#13;
{if ($isSuspendOk) then &lt;trt:suspendUntil/&gt; else '' }&#13;
{if ($state = 'SUSPENDED' and ($isOwner or $isAdmin or not($hasOwner) )) then &lt;trt:resume/&gt; else '' }&#13;
{if ($isOwnerInProgress) then &lt;trt:complete/&gt; else ''}&#13;
{if ($isNotification) then &lt;trt:remove/&gt; else ''}&#13;
{if ($isOwnerInProgress) then &lt;trt:fail/&gt; else '' }&#13;
{if ($isOwnerOrAdminNotFinal) then &lt;trt:setPriority/&gt; else ''}&#13;
{if ($isOwnerOrAdminNotFinal and $state != 'SUSPENDED') then &lt;trt:addAttachment/&gt; else ''}&#13;
&lt;trt:getAttachmentInfos/&gt;&#13;
&lt;trt:getAttachments/&gt;&#13;
{if ($isOwnerOrAdminNotFinal and $state != 'SUSPENDED') then &lt;trt:deleteAttachments/&gt; else ''}&#13;
{if ($notFinal) then &lt;trt:addComment/&gt; else ''}&#13;
&lt;trt:getComments/&gt;&#13;
{if ($isOwnerOrAdminNotFinal and $state != 'SUSPENDED' and $gTaskInstance/trt:context/trt:isSkipable = 'true' ) then &lt;trt:skip/&gt; else ''}&#13;
{if ($notFinal and count($gTaskInstance/trt:context/trt:potentialOwners/htd:users/htd:user) != 0 and $state != 'SUSPENDED') then &lt;trt:forward/&gt; else ''}&#13;
{if ( $gDelegation/@potentialDelegatees != 'nobody' and ($state = 'READY' or $isOwnerOrAdminNotFinal) and $state != 'SUSPENDED') then &lt;trt:delegate/&gt; else ''}&#13;
&lt;trt:getRendering/&gt;&#13;
&lt;trt:getRenderingTypes/&gt;&#13;
&lt;trt:getTaskInfo/&gt;&#13;
&lt;trt:getTaskDescription/&gt;&#13;
{if ($isOwnerInProgress) then &lt;trt:setOutput/&gt; else ''}&#13;
{if ($isOwnerInProgress) then &lt;trt:deleteOutput/&gt; else ''}&#13;
{if ($isOwnerInProgress) then &lt;trt:setFault/&gt; else ''}&#13;
{if ($isOwnerInProgress) then &lt;trt:deleteFault/&gt; else ''}&#13;
&lt;trt:getInput/&gt;&#13;
{if ($isOwner or $isAdmin) then &lt;trt:getOutput/&gt; else ''}&#13;
{if ($isOwner or $isAdmin) then &lt;trt:getFault/&gt; else ''}&#13;
{if ($isAdmin and $state = 'CREATED') then &lt;trt:activate/&gt; else ''}&#13;
{if ($isAdmin and $state = 'READY') then &lt;trt:nominate/&gt; else ''}&#13;
{if ($isAdmin and not($notFinal)) then &lt;trt:setGenericHumanRole/&gt; else ''}&#13;
&lt;/trt:permissions&gt;</bpel:from>
                                    <bpel:to variable="permissions"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:else>
                        </bpel:if>
                        <bpel:assign name="prepResponse">
                           <bpel:copy>
                              <bpel:from>&lt;taskInstance&gt;&#13;
{$taskInstance/*}&#13;
{$permissions}&#13;
{$gInterfaceMetadata}&#13;
{if (exists( $gRenderings/htd:rendering )) then $gRenderings else ''}&#13;
&lt;/taskInstance&gt;</bpel:from>
                              <bpel:to variable="taskInstance"/>
                           </bpel:copy>
                        </bpel:assign>
                        <bpel:reply operation="getInstance" partnerLink="aeTaskOperations-getInstance" variable="taskInstance"/>
                     </bpel:sequence>
                  </bpel:flow>
               </bpel:scope>
            </bpel:onEvent>
            <bpel:onEvent element="tsw:getTaskInstance" operation="getInstance" partnerLink="internal" variable="getTaskInstanceRequest">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CS1"/>
               </bpel:correlations>
               <bpel:scope name="InternalGetTask">
                  <bpel:variables>
                     <bpel:variable element="trt:taskInstance" name="getTaskInstanceResponse"/>
                     <bpel:variable name="ignoreAttachmentCopyResult" type="xsd:string"/>
                  </bpel:variables>
                  <bpel:flow>
                     <bpel:links>
                        <bpel:link name="L9"/>
                     </bpel:links>
                     <bpel:assign name="GetTaskInstance">
                        <bpel:sources>
                           <bpel:source linkName="L9"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from variable="gTaskInstance"/>
                           <bpel:to variable="getTaskInstanceResponse"/>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>let $presentationElements := &lt;htd:presentationElements&gt;{ $gPresentationElements/* }&lt;/htd:presentationElements&gt;&#13;
return&#13;
trt:evalTaskPresentationElements( $presentationElements , $gProcessVariables, $gTaskInstance, $gParentTaskInstance )</bpel:from>
                           <bpel:to variable="getTaskInstanceResponse">
                              <bpel:query>trt:presentation</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                        <bpel:copy ignoreMissingFromData="yes">
                           <bpel:from>let $includeFlag := $getTaskInstanceRequest/tsw:includeAttachments = 'true'&#13;
return&#13;
if ( $includeFlag and $gAttachmentPropagation = "newOnly" ) then &#13;
&lt;ignored&gt;&#13;
{&#13;
   for $attachmentId in $gAttachments/trt:attachmentId&#13;
      return trt:copyHTAttachmentById('gAttachments', 'getTaskInstanceResponse', data($attachmentId) )&#13;
}&#13;
&lt;/ignored&gt;&#13;
else if ( $includeFlag and $gAttachmentPropagation = "all" ) then &#13;
&lt;ignored&gt;&#13;
{&#13;
   abx:copyAllAttachments('gAttachments', 'getTaskInstanceResponse')&#13;
}&#13;
&lt;/ignored&gt;&#13;
else ()</bpel:from>
                           <bpel:to variable="ignoreAttachmentCopyResult"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:reply operation="getInstance" partnerLink="internal" variable="getTaskInstanceResponse">
                        <bpel:targets>
                           <bpel:target linkName="L9"/>
                        </bpel:targets>
                     </bpel:reply>
                  </bpel:flow>
               </bpel:scope>
            </bpel:onEvent>
            <bpel:onEvent element="tewt:removeListenerData" operation="removeTaskStateChangeListener" partnerLink="taskStateChangeRegistryPL" variable="removeTaskStateChangeListener">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CS1"/>
               </bpel:correlations>
               <bpel:scope name="RemoveListener">
                  <bpel:flow>
                     <bpel:links>
                        <bpel:link name="L136"/>
                     </bpel:links>
                     <bpel:assign name="RemoveListener">
                        <bpel:sources>
                           <bpel:source linkName="L136"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from>&lt;listenerList&gt;&#13;
{ $gListenerList/tewt:taskListener[ tewt:listenerId != string($removeTaskStateChangeListener/tewt:listenerId) ] }&#13;
&lt;/listenerList&gt;</bpel:from>
                           <bpel:to variable="gListenerList"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:reply operation="removeTaskStateChangeListener" partnerLink="taskStateChangeRegistryPL">
                        <bpel:targets>
                           <bpel:target linkName="L136"/>
                        </bpel:targets>
                     </bpel:reply>
                  </bpel:flow>
               </bpel:scope>
            </bpel:onEvent>
            <bpel:onEvent element="htdt:getRenderingTypes" operation="getRenderingTypes" partnerLink="taskOperations-getRenderingTypes" variable="getRenderingTypes">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CS1"/>
               </bpel:correlations>
               <bpel:scope name="getRenderingTypes">
                  <bpel:partnerLinks>
                     <bpel:partnerLink myRole="process" name="taskOperations-getRenderingTypes" partnerLinkType="ts:taskOperationsPLT"/>
                  </bpel:partnerLinks>
                  <bpel:variables>
                     <bpel:variable element="htdt:getRenderingTypesResponse" name="getRenderingTypesResponse"/>
                  </bpel:variables>
                  <bpel:sequence>
                     <bpel:assign name="PrepareResponse">
                        <bpel:copy>
                           <bpel:from>&lt;htdt:getRenderingTypesResponse xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
{&#13;
   for $rendering in $gRenderings/htd:rendering&#13;
   let $renderName := resolve-QName($rendering/@type, $rendering) &#13;
   let $renderType := &lt;htdt:renderingType&gt;{string($rendering/@type)}&lt;/htdt:renderingType&gt;&#13;
   return&#13;
   (: The element constructor below is a trick to add a ns decl for the rendering hint's QName. :) &#13;
   element { QName(namespace-uri-from-QName($renderName), concat(substring-before($rendering/@type, ":"), ":x")) } {$renderType}/* &#13;
}&#13;
&lt;/htdt:getRenderingTypesResponse&gt;</bpel:from>
                           <bpel:to variable="getRenderingTypesResponse"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:reply operation="getRenderingTypes" partnerLink="taskOperations-getRenderingTypes" variable="getRenderingTypesResponse"/>
                  </bpel:sequence>
               </bpel:scope>
            </bpel:onEvent>
            <bpel:onEvent element="htdt:getRendering" operation="getRendering" partnerLink="taskOperations-getRendering" variable="getRendering">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CS1"/>
               </bpel:correlations>
               <bpel:scope name="getRendering">
                  <bpel:partnerLinks>
                     <bpel:partnerLink myRole="process" name="taskOperations-getRendering" partnerLinkType="ts:taskOperationsPLT"/>
                  </bpel:partnerLinks>
                  <bpel:variables>
                     <bpel:variable element="htdt:getRenderingResponse" name="getRenderingResponse"/>
                     <bpel:variable element="htdt:illegalArgument" name="illegalArgumentFault"/>
                  </bpel:variables>
                  <bpel:sequence>
                     <bpel:assign name="PrepareResponse">
                        <bpel:copy>
                           <bpel:from>let $qnameToMatch := resolve-QName(string($getRendering/htdt:renderingType), $getRendering/htdt:renderingType) &#13;
let $rendering := $gRenderings/htd:rendering[resolve-QName(string(@type), .) = $qnameToMatch ]&#13;
return&#13;
&lt;htdt:getRenderingResponse xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
{&#13;
   if (exists($rendering/*)) then&#13;
   &lt;htdt:rendering&gt;{ $rendering/* }&lt;/htdt:rendering&gt;&#13;
   else ()&#13;
}&#13;
&lt;/htdt:getRenderingResponse&gt;</bpel:from>
                           <bpel:to variable="getRenderingResponse"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:if>
                        <bpel:condition>exists($getRenderingResponse/htdt:rendering)</bpel:condition>
                        <bpel:reply operation="getRendering" partnerLink="taskOperations-getRendering" variable="getRenderingResponse"/>
                        <bpel:else>
                           <bpel:sequence>
                              <bpel:assign name="PrepareFault">
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>There is no rendering type available with the provided QName.</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="illegalArgumentFault"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:reply faultName="htaw:illegalArgumentFault" operation="getRendering" partnerLink="taskOperations-getRendering" variable="illegalArgumentFault"/>
                           </bpel:sequence>
                        </bpel:else>
                     </bpel:if>
                  </bpel:sequence>
               </bpel:scope>
            </bpel:onEvent>
            <bpel:onAlarm>
               <bpel:until>$gDeferActivation</bpel:until>
               <bpel:scope name="DeferActivationAlarm">
                  <bpel:variables>
                     <bpel:variable element="tsw:activate" name="activateTaskRequest">
                        <bpel:from>&lt;activate&gt;&#13;
{data( $gTaskInstance/trt:identifier ) }&#13;
&lt;/activate&gt;</bpel:from>
                     </bpel:variable>
                  </bpel:variables>
                  <bpel:invoke inputVariable="activateTaskRequest" name="activate" operation="activate" partnerLink="internal">
                     <bpel:correlations>
                        <bpel:correlation initiate="no" pattern="request" set="CS1"/>
                     </bpel:correlations>
                  </bpel:invoke>
               </bpel:scope>
            </bpel:onAlarm>
            <bpel:onAlarm>
               <bpel:until>$gExpiration</bpel:until>
               <bpel:scope name="Expiration">
                  <bpel:variables>
                     <bpel:variable element="tsw:expire" name="expire">
                        <bpel:from>$gTaskInstance/trt:identifier</bpel:from>
                     </bpel:variable>
                  </bpel:variables>
                  <bpel:invoke inputVariable="expire" name="expire" operation="expire" partnerLink="internal"/>
               </bpel:scope>
            </bpel:onAlarm>
         </bpel:eventHandlers>
         <bpel:repeatUntil name="KeepLoopingUntilFinal">
            <bpel:condition>$gFinalStateReached</bpel:condition>
            <bpel:flow>
               <bpel:links>
                  <bpel:link name="UpdateTaskToNotifyListeners"/>
                  <bpel:link name="StateMachineToNotifyListeners"/>
                  <bpel:link name="StateMachineToUpdateTask"/>
               </bpel:links>
               <bpel:scope name="UpdateTask">
                  <bpel:targets>
                     <bpel:target linkName="StateMachineToUpdateTask"/>
                  </bpel:targets>
                  <bpel:sources>
                     <bpel:source linkName="UpdateTaskToNotifyListeners"/>
                  </bpel:sources>
                  <bpel:variables>
                     <bpel:variable element="store:storeTaskData" name="storeTask">
                        <bpel:from>&lt;store:storeTaskData xmlns:htapi="http://www.example.org/WS-HT/api" xmlns:htd="http://www.example.org/WS-HT" xmlns:store="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-storage.wsdl" xmlns:trt="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-rt.xsd"&gt;&#13;
   &lt;store:processId&gt;{ abx:getProcessId() }&lt;/store:processId&gt;&#13;
   { $gTaskInstance }&#13;
   &lt;store:update&gt;true&lt;/store:update&gt;&#13;
&lt;/store:storeTaskData&gt;</bpel:from>
                     </bpel:variable>
                  </bpel:variables>
                  <bpel:faultHandlers>
                     <bpel:catchAll>
                        <bpel:empty/>
                     </bpel:catchAll>
                  </bpel:faultHandlers>
                  <bpel:flow>
                     <bpel:links>
                        <bpel:link name="L113"/>
                     </bpel:links>
                     <bpel:assign name="UpdateTaskValues">
                        <bpel:sources>
                           <bpel:source linkName="L113"/>
                        </bpel:sources>
                        <bpel:copy>
                           <bpel:from>let $presentationElements := &lt;htd:presentationElements&gt;{ $gPresentationElements/* }&lt;/htd:presentationElements&gt;&#13;
return&#13;
trt:evalTaskPresentationElements( $presentationElements , $gProcessVariables, $storeTask/trt:taskInstance, $gParentTaskInstance )</bpel:from>
                           <bpel:to variable="storeTask">
                              <bpel:query>trt:taskInstance/trt:presentation</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                        <bpel:copy ignoreMissingFromData="yes">
                           <bpel:from>if ( $gTaskInstance/trt:context/trt:completionTime != '' and not($gFinalizationDeadlineSet) ) then&#13;
let $finalizationDuration := xs:duration(trt:getFinalizationDuration())&#13;
return (current-dateTime() + xs:yearMonthDuration($finalizationDuration)) + xs:dayTimeDuration($finalizationDuration)&#13;
else ()</bpel:from>
                           <bpel:to variable="gFinalizationDeadline"/>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>$gFinalizationDeadlineSet or $gTaskInstance/trt:context/trt:completionTime != ''</bpel:from>
                           <bpel:to variable="gFinalizationDeadlineSet"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:invoke inputVariable="storeTask" name="UpdateTask" operation="storeTask" partnerLink="storagePL">
                        <bpel:targets>
                           <bpel:target linkName="L113"/>
                        </bpel:targets>
                     </bpel:invoke>
                  </bpel:flow>
               </bpel:scope>
               <bpel:scope name="NotifyListeners">
                  <bpel:targets>
                     <bpel:joinCondition>$StateMachineToNotifyListeners</bpel:joinCondition>
                     <bpel:target linkName="UpdateTaskToNotifyListeners"/>
                     <bpel:target linkName="StateMachineToNotifyListeners"/>
                  </bpel:targets>
                  <bpel:variables>
                     <bpel:variable element="tewt:listenerList" name="listeners">
                        <bpel:from>$gListenerList</bpel:from>
                     </bpel:variable>
                     <bpel:variable element="tewt:taskStateChangeEvent" name="taskStateChange">
                        <bpel:from>&lt;tewt:taskStateChangeEvent xmlns:tew="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-events-wsdl.xsd" xmlns:trt="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-rt.xsd"&gt;&#13;
   &lt;tewt:listenerId&gt;1&lt;/tewt:listenerId&gt;&#13;
   { $gTaskInstance/trt:identifier }&#13;
   &lt;tewt:state&gt;{data( $gTaskInstance/trt:context/trt:status)} &lt;/tewt:state&gt;&#13;
   &lt;tewt:oldState&gt;{data($gOldState)}&lt;/tewt:oldState&gt;&#13;
&lt;/tewt:taskStateChangeEvent&gt;</bpel:from>
                     </bpel:variable>
                  </bpel:variables>
                  <bpel:forEach counterName="counter" parallel="no">
                     <bpel:startCounterValue>1</bpel:startCounterValue>
                     <bpel:finalCounterValue>count( $listeners/tewt:taskListener )</bpel:finalCounterValue>
                     <bpel:scope name="NotifyListeners">
                        <bpel:sequence>
                           <bpel:assign name="UpdatePlinkAndRef">
                              <bpel:copy>
                                 <bpel:from>$listeners[ $counter ]/tewt:taskListener/sref:service-ref</bpel:from>
                                 <bpel:to partnerLink="taskStateChangeListenerPL"/>
                              </bpel:copy>
                              <bpel:copy>
                                 <bpel:from>$listeners[ $counter ]/tewt:taskListener/tewt:listenerId</bpel:from>
                                 <bpel:to variable="taskStateChange">
                                    <bpel:query>tewt:listenerId</bpel:query>
                                 </bpel:to>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:invoke inputVariable="taskStateChange" name="NotifyListener" operation="handleStateChangeEvent" partnerLink="taskStateChangeListenerPL"/>
                        </bpel:sequence>
                     </bpel:scope>
                  </bpel:forEach>
               </bpel:scope>
               <bpel:scope name="StateMachine">
                  <bpel:sources>
                     <bpel:source linkName="StateMachineToNotifyListeners">
                        <bpel:transitionCondition>$stateChanged</bpel:transitionCondition>
                     </bpel:source>
                     <bpel:source linkName="StateMachineToUpdateTask">
                        <bpel:transitionCondition>$stateChanged or $dataUpdated</bpel:transitionCondition>
                     </bpel:source>
                  </bpel:sources>
                  <bpel:variables>
                     <bpel:variable element="tsw:activate" name="activateTaskRequest"/>
                     <bpel:variable name="dataUpdated" type="xsd:boolean">
                        <bpel:from>false()</bpel:from>
                     </bpel:variable>
                     <bpel:variable name="stateChanged" type="xsd:boolean">
                        <bpel:from>false()</bpel:from>
                     </bpel:variable>
                     <bpel:variable element="htdt:activate" name="activate"/>
                     <bpel:variable element="htdt:claim" name="claim"/>
                     <bpel:variable element="aeid:principalQueryAssertion" name="assertionInput"/>
                     <bpel:variable element="htdt:illegalAccess" name="illegalAccessFault"/>
                     <bpel:variable element="htdt:illegalState" name="illegalStateFault"/>
                     <bpel:variable element="htdt:illegalArgument" name="illegalArgumentFault"/>
                     <bpel:variable element="htdt:illegalOperation" name="illegalOperationFault"/>
                     <bpel:variable element="htdt:start" name="start"/>
                     <bpel:variable element="htdt:stop" name="stop"/>
                     <bpel:variable element="htdt:release" name="release"/>
                     <bpel:variable element="htdt:suspend" name="suspend"/>
                     <bpel:variable element="htdt:suspendUntil" name="suspendUntil"/>
                     <bpel:variable element="htdt:resume" name="resume"/>
                     <bpel:variable name="principal" type="xsd:string"/>
                     <bpel:variable element="tsw:resume" name="resumeTaskRequest"/>
                     <bpel:variable element="htdt:setOutput" name="setOutput"/>
                     <bpel:variable element="htdt:complete" name="complete"/>
                     <bpel:variable element="htdt:fail" name="fail"/>
                     <bpel:variable element="htdt:setPriority" name="setPriority"/>
                     <bpel:variable element="htdt:skip" name="skip"/>
                     <bpel:variable element="htdt:forward" name="forward"/>
                     <bpel:variable element="htdt:delegate" name="delegate"/>
                     <bpel:variable element="htdt:addComment" name="addComment"/>
                     <bpel:variable element="tsw:updateComment" name="updateComment"/>
                     <bpel:variable element="tsw:deleteComment" name="deleteComment"/>
                     <bpel:variable element="htdt:addCommentResponse" name="addCommentResponse"/>
                     <bpel:variable element="htdt:setFault" name="setFault"/>
                     <bpel:variable element="tsw:expire" name="expire"/>
                     <bpel:variable element="tewt:addListenerData" name="addTaskStateChangeListener"/>
                     <bpel:variable element="tewt:listenerId" name="addTaskStateChangeListenerResponse"/>
                     <bpel:variable element="tsw:escalate" name="escalate"/>
                     <bpel:variable element="tsw:reassign" name="reassign"/>
                     <bpel:variable element="htdt:remove" name="remove"/>
                     <bpel:variable element="htdt:deleteOutput" name="deleteOutput"/>
                     <bpel:variable element="htdt:deleteFault" name="deleteFault"/>
                     <bpel:variable element="htdt:addAttachment" name="addAttachment"/>
                     <bpel:variable element="htdt:deleteAttachments" name="deleteAttachments"/>
                     <bpel:variable element="tsw:deleteAttachmentById" name="deleteAttachmentByIdRequest"/>
                     <bpel:variable element="tsw:cancel" name="cancelTaskRequest"/>
                     <bpel:variable element="tsw:finalize" name="finalize"/>
                     <bpel:variable element="htdt:nominate" name="nominate"/>
                     <bpel:variable element="htdt:nominateResponse" name="nominateResponse"/>
                     <bpel:variable element="htdt:setGenericHumanRole" name="setGenericHumanRole"/>
                     <bpel:variable element="htdt:setGenericHumanRoleResponse" name="setGenericHumanRoleResponse"/>
                  </bpel:variables>
                  <bpel:eventHandlers>
                     <bpel:onAlarm>
                        <bpel:until>$gFinalizationDeadline</bpel:until>
                        <bpel:scope name="FinalizationAlarm">
                           <bpel:variables>
                              <bpel:variable element="tsw:finalize" name="finalize">
                                 <bpel:from>$gTaskInstance/trt:identifier</bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:invoke inputVariable="finalize" name="Finalize" operation="finalize" partnerLink="internal"/>
                        </bpel:scope>
                     </bpel:onAlarm>
                  </bpel:eventHandlers>
                  <bpel:pick>
                     <bpel:onMessage operation="claim" partnerLink="taskOperations" variable="claim">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Claim">
                           <bpel:variables>
                              <bpel:variable element="htdt:claimResponse" name="claimResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:sequence>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have rights to claim the task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="claim" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                 </bpel:sequence>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:sequence>
                              <bpel:assign name="PrepAssertion">
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','claim', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   { &#13;
	(: Convert the potentialOwners and excludedOwners to an identityQuery :)&#13;
	trt:toIdentityQuery( $gTaskInstance/trt:context/trt:potentialOwners, $gTaskInstance/trt:context/trt:excludedOwners )&#13;
   }&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(                              trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                       $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                    <bpel:to variable="assertionInput"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:invoke inputVariable="assertionInput" name="AssertPotentialOwnerOrAdmin-claim" operation="assertPrincipalInQueryResult" partnerLink="identityPL"/>
                              <bpel:if>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:status = 'READY'</bpel:condition>
                                 <bpel:sequence>
                                    <bpel:assign name="MarkAsReserved">
                                       <bpel:copy>
                                          <bpel:from>$gTaskInstance/trt:context/trt:status</bpel:from>
                                          <bpel:to variable="gOldState"/>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>RESERVED</bpel:literal>
                                          </bpel:from>
                                          <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                          <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                          <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>&lt;owner&gt;{$principal}&lt;/owner&gt;</bpel:from>
                                          <bpel:to>$gTaskInstance/trt:context/trt:actualOwner</bpel:to>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>true</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="stateChanged"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply operation="claim" partnerLink="taskOperations" variable="claimResponse"/>
                                 </bpel:sequence>
                                 <bpel:else>
                                    <bpel:sequence>
                                       <bpel:assign name="IllegalState">
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the READY state in order to be claimed.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="claim" partnerLink="taskOperations" variable="illegalStateFault"/>
                                    </bpel:sequence>
                                 </bpel:else>
                              </bpel:if>
                           </bpel:sequence>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="start" partnerLink="taskOperations" variable="start">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Start">
                           <bpel:variables>
                              <bpel:variable element="htdt:startResponse" name="startResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:sequence>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have rights to start the task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="start" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                 </bpel:sequence>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L21"/>
                                 <bpel:link name="L49"/>
                                 <bpel:link name="L48"/>
                                 <bpel:link name="L20"/>
                              </bpel:links>
                              <bpel:assign name="PrepAssertion">
                                 <bpel:sources>
                                    <bpel:source linkName="L21"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','start', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   { &#13;
	(: Convert the potentialOwners and excludedOwners to an identityQuery :)&#13;
	trt:toIdentityQuery( $gTaskInstance/trt:context/trt:potentialOwners, $gTaskInstance/trt:context/trt:excludedOwners )&#13;
   }&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                    <bpel:to variable="assertionInput"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L21"/>
                                 </bpel:targets>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:status != 'READY' and $gTaskInstance/trt:context/trt:status != 'RESERVED'</bpel:condition>
                                 <bpel:sequence>
                                    <bpel:assign name="IllegalState">
                                       <bpel:copy>
                                          <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the READY or RESERVED state in order to be started.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                          <bpel:to variable="illegalStateFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalStateFault" operation="start" partnerLink="taskOperations" variable="illegalStateFault"/>
                                 </bpel:sequence>
                                 <bpel:elseif>
                                    <bpel:condition>$gTaskInstance/trt:context/trt:status = 'RESERVED' and $gTaskInstance/trt:context/trt:actualOwner != $principal</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="IllegalAccess">
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>Task is reserved by another user.</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="illegalAccessFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalAccessFault" operation="start" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>$gTaskInstance/trt:context/trt:status = 'READY'</bpel:condition>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertPotentialOwnerOrAdmin-start" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                       <bpel:sources>
                                          <bpel:source linkName="L49"/>
                                       </bpel:sources>
                                    </bpel:invoke>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:empty name="OkToStart">
                                       <bpel:sources>
                                          <bpel:source linkName="L48"/>
                                       </bpel:sources>
                                    </bpel:empty>
                                 </bpel:else>
                              </bpel:if>
                              <bpel:assign name="MarkAsInProgress">
                                 <bpel:targets>
                                    <bpel:target linkName="L49"/>
                                    <bpel:target linkName="L48"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L20"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>$gTaskInstance/trt:context/trt:status</bpel:from>
                                    <bpel:to variable="gOldState"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>IN_PROGRESS</bpel:literal>
                                    </bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;owner&gt;{$principal}&lt;/owner&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:actualOwner</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>true</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="stateChanged"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:reply operation="start" partnerLink="taskOperations" variable="startResponse">
                                 <bpel:targets>
                                    <bpel:target linkName="L20"/>
                                 </bpel:targets>
                              </bpel:reply>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="stop" partnerLink="taskOperations" variable="stop">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Stop">
                           <bpel:variables>
                              <bpel:variable element="htdt:stopResponse" name="stopResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:sequence>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>Only the owner of the task is allowed to stop it.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="stop" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                 </bpel:sequence>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:sequence>
                              <bpel:assign name="PrepAssertion">
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','stop', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                    <bpel:to variable="assertionInput"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:if>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:actualOwner != $principal</bpel:condition>
                                 <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-stop" operation="assertPrincipalInQueryResult" partnerLink="identityPL"/>
                              </bpel:if>
                              <bpel:if>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:status != 'IN_PROGRESS'</bpel:condition>
                                 <bpel:sequence>
                                    <bpel:assign name="IllegalState">
                                       <bpel:copy>
                                          <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the IN_PROGRESS state in order to be stopped.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                          <bpel:to variable="illegalStateFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalStateFault" operation="stop" partnerLink="taskOperations" variable="illegalStateFault"/>
                                 </bpel:sequence>
                                 <bpel:else>
                                    <bpel:sequence>
                                       <bpel:assign name="MarkAsReserved">
                                          <bpel:copy>
                                             <bpel:from>$gTaskInstance/trt:context/trt:status</bpel:from>
                                             <bpel:to variable="gOldState"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>RESERVED</bpel:literal>
                                             </bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="stateChanged"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="stop" partnerLink="taskOperations" variable="stopResponse"/>
                                    </bpel:sequence>
                                 </bpel:else>
                              </bpel:if>
                           </bpel:sequence>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="release" partnerLink="taskOperations" variable="release">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Release">
                           <bpel:variables>
                              <bpel:variable element="htdt:releaseResponse" name="releaseResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:sequence>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>Only the owner of the task is allowed to release it.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="release" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                 </bpel:sequence>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:sequence>
                              <bpel:assign name="PrepAssertion">
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','release', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                    <bpel:to variable="assertionInput"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:if>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:actualOwner != $principal</bpel:condition>
                                 <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-release" operation="assertPrincipalInQueryResult" partnerLink="identityPL"/>
                              </bpel:if>
                              <bpel:if>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:status != 'IN_PROGRESS' and $gTaskInstance/trt:context/trt:status != 'RESERVED'</bpel:condition>
                                 <bpel:sequence>
                                    <bpel:assign name="IllegalState">
                                       <bpel:copy>
                                          <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the IN_PROGRESS or RESERVED states in order to be released.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                          <bpel:to variable="illegalStateFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalStateFault" operation="release" partnerLink="taskOperations" variable="illegalStateFault"/>
                                 </bpel:sequence>
                                 <bpel:else>
                                    <bpel:sequence>
                                       <bpel:assign name="MarkAsReleased">
                                          <bpel:copy>
                                             <bpel:from>$gTaskInstance/trt:context/trt:status</bpel:from>
                                             <bpel:to variable="gOldState"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>READY</bpel:literal>
                                             </bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="stateChanged"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from variable="gNil"/>
                                             <bpel:to>$gTaskInstance/trt:context/trt:actualOwner</bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="release" partnerLink="taskOperations" variable="releaseResponse"/>
                                    </bpel:sequence>
                                 </bpel:else>
                              </bpel:if>
                           </bpel:sequence>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="suspend" partnerLink="taskOperations" variable="suspend">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Suspend">
                           <bpel:variables>
                              <bpel:variable element="htdt:suspendResponse" name="suspendResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:sequence>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have access to suspend this task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="suspend" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                 </bpel:sequence>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L23"/>
                                 <bpel:link name="L24"/>
                                 <bpel:link name="L42"/>
                                 <bpel:link name="L25"/>
                                 <bpel:link name="L27"/>
                              </bpel:links>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L23"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','suspend', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L23"/>
                                 </bpel:targets>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:status = 'READY'</bpel:condition>
                                 <bpel:sequence>
                                    <bpel:sources>
                                       <bpel:source linkName="L24"/>
                                    </bpel:sources>
                                    <bpel:assign name="PrepAssertion">
                                       <bpel:copy>
                                          <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   { &#13;
	(: Convert the potentialOwners and excludedOwners to an identityQuery :)&#13;
	trt:toIdentityQuery( $gTaskInstance/trt:context/trt:potentialOwners, $gTaskInstance/trt:context/trt:excludedOwners )&#13;
   }&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                          <bpel:to variable="assertionInput"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertPotentialOwnerOrAdmin-suspend" operation="assertPrincipalInQueryResult" partnerLink="identityPL"/>
                                 </bpel:sequence>
                                 <bpel:elseif>
                                    <bpel:condition>( $gTaskInstance/trt:context/trt:status = 'RESERVED' or  $gTaskInstance/trt:context/trt:status = 'IN_PROGRESS' ) and $principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:sources>
                                          <bpel:source linkName="L42"/>
                                       </bpel:sources>
                                       <bpel:assign name="PrepAssertion">
                                          <bpel:copy>
                                             <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                             <bpel:to variable="assertionInput"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-suspend" operation="assertPrincipalInQueryResult" partnerLink="identityPL"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>$gTaskInstance/trt:context/trt:status != 'RESERVED' and  $gTaskInstance/trt:context/trt:status != 'IN_PROGRESS'</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="IllegalState">
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the RESERVED or IN_PROGRESS state in order to be suspended by the owner.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="suspend" partnerLink="taskOperations" variable="illegalStateFault"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:empty name="OkToSuspend">
                                       <bpel:sources>
                                          <bpel:source linkName="L25"/>
                                       </bpel:sources>
                                    </bpel:empty>
                                 </bpel:else>
                              </bpel:if>
                              <bpel:reply operation="suspend" partnerLink="taskOperations" variable="suspendResponse">
                                 <bpel:targets>
                                    <bpel:target linkName="L27"/>
                                 </bpel:targets>
                              </bpel:reply>
                              <bpel:assign name="MarkAsSuspended">
                                 <bpel:targets>
                                    <bpel:target linkName="L24"/>
                                    <bpel:target linkName="L42"/>
                                    <bpel:target linkName="L25"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L27"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>$gTaskInstance/trt:context/trt:status</bpel:from>
                                    <bpel:to variable="gOldState"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>SUSPENDED</bpel:literal>
                                    </bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>true</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="stateChanged"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="suspendUntil" partnerLink="taskOperations" variable="suspendUntil">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="SuspendUntil">
                           <bpel:variables>
                              <bpel:variable element="htdt:suspendUntilResponse" name="suspendUntilResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                              <bpel:variable element="tsw:scheduleWakeupRequest" name="scheduleWakeupRequest"/>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:sequence>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have access to suspend this task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="suspendUntil" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                 </bpel:sequence>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L29"/>
                                 <bpel:link name="L31"/>
                                 <bpel:link name="L22"/>
                                 <bpel:link name="L28"/>
                                 <bpel:link name="L43"/>
                                 <bpel:link name="L44"/>
                              </bpel:links>
                              <bpel:reply operation="suspendUntil" partnerLink="taskOperations" variable="suspendUntilResponse">
                                 <bpel:targets>
                                    <bpel:target linkName="L31"/>
                                 </bpel:targets>
                              </bpel:reply>
                              <bpel:assign name="MarkAsSuspended">
                                 <bpel:targets>
                                    <bpel:target linkName="L28"/>
                                    <bpel:target linkName="L43"/>
                                    <bpel:target linkName="L44"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L29"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>$gTaskInstance/trt:context/trt:status</bpel:from>
                                    <bpel:to variable="gOldState"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>SUSPENDED</bpel:literal>
                                    </bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>true</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="stateChanged"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;tsw:scheduleWakeupRequest xmlns:trt="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-rt.xsd" xmlns:tsw="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-state-wsdl.xsd"&gt;&#13;
   { $gTaskInstance/trt:identifier }&#13;
   &lt;tsw:alarm&gt;{&#13;
if (exists( $suspendUntil/htdt:time/htdt:pointOfTime )) then&#13;
	data($suspendUntil/htdt:time/htdt:pointOfTime)&#13;
else&#13;
trt:durationToDeadline( data( $suspendUntil/htdt:time/htdt:timePeriod ) )&#13;
}&#13;
   &lt;/tsw:alarm&gt;&#13;
&lt;/tsw:scheduleWakeupRequest&gt;</bpel:from>
                                    <bpel:to variable="scheduleWakeupRequest"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:invoke inputVariable="scheduleWakeupRequest" name="ScheduleWakeup" operation="scheduleWakeup" outputVariable="gScheduleWakeupResponse" partnerLink="wakeupPL">
                                 <bpel:targets>
                                    <bpel:target linkName="L29"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L31"/>
                                 </bpel:sources>
                                 <bpel:correlations>
                                    <bpel:correlation initiate="no" pattern="request" set="CS1"/>
                                 </bpel:correlations>
                              </bpel:invoke>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L22"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','suspendUntil', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L22"/>
                                 </bpel:targets>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:status = 'READY'</bpel:condition>
                                 <bpel:sequence>
                                    <bpel:sources>
                                       <bpel:source linkName="L28"/>
                                    </bpel:sources>
                                    <bpel:assign name="PrepAssertion">
                                       <bpel:copy>
                                          <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   { &#13;
	(: Convert the potentialOwners and excludedOwners to an identityQuery :)&#13;
	trt:toIdentityQuery( $gTaskInstance/trt:context/trt:potentialOwners, $gTaskInstance/trt:context/trt:excludedOwners )&#13;
   }&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                          <bpel:to variable="assertionInput"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertPotentialOwnerOrAdmin-suspendUntil" operation="assertPrincipalInQueryResult" partnerLink="identityPL"/>
                                 </bpel:sequence>
                                 <bpel:elseif>
                                    <bpel:condition>( $gTaskInstance/trt:context/trt:status = 'RESERVED' or  $gTaskInstance/trt:context/trt:status = 'IN_PROGRESS' ) and $principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:sources>
                                          <bpel:source linkName="L43"/>
                                       </bpel:sources>
                                       <bpel:assign name="PrepAssertion">
                                          <bpel:copy>
                                             <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                             <bpel:to variable="assertionInput"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-suspendUntil" operation="assertPrincipalInQueryResult" partnerLink="identityPL"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>$gTaskInstance/trt:context/trt:status != 'RESERVED' and  $gTaskInstance/trt:context/trt:status != 'IN_PROGRESS'</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="IllegalState">
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the RESERVED or IN_PROGRESS state in order to be suspended by the owner.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="suspend" partnerLink="taskOperations" variable="illegalStateFault"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:empty name="OkToSuspend">
                                       <bpel:sources>
                                          <bpel:source linkName="L44"/>
                                       </bpel:sources>
                                    </bpel:empty>
                                 </bpel:else>
                              </bpel:if>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="resume" partnerLink="taskOperations" variable="resume">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Resume">
                           <bpel:variables>
                              <bpel:variable name="isSuspended" type="xsd:boolean"/>
                              <bpel:variable element="htdt:resumeResponse" name="resumeResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:sequence>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have access to resume this task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="resume" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                 </bpel:sequence>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L37"/>
                                 <bpel:link name="L45"/>
                                 <bpel:link name="L33"/>
                                 <bpel:link name="L46"/>
                                 <bpel:link name="L32"/>
                                 <bpel:link name="L38"/>
                              </bpel:links>
                              <bpel:if name="CancelWakeup">
                                 <bpel:targets>
                                    <bpel:target linkName="L46"/>
                                 </bpel:targets>
                                 <bpel:condition>$gScheduleWakeupResponse != ''</bpel:condition>
                                 <bpel:scope>
                                    <bpel:variables>
                                       <bpel:variable element="tsw:cancelWakeupRequest" name="cancelWakeupRequest">
                                          <bpel:from variable="gScheduleWakeupResponse"/>
                                       </bpel:variable>
                                    </bpel:variables>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L47"/>
                                       </bpel:links>
                                       <bpel:assign name="ClearWakeupResponse">
                                          <bpel:sources>
                                             <bpel:source linkName="L47"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from variable="gNil"/>
                                             <bpel:to variable="gScheduleWakeupResponse"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:invoke inputVariable="cancelWakeupRequest" name="CancelWakeup" operation="cancelWakeup" partnerLink="wakeupPL">
                                          <bpel:targets>
                                             <bpel:target linkName="L47"/>
                                          </bpel:targets>
                                       </bpel:invoke>
                                    </bpel:flow>
                                 </bpel:scope>
                              </bpel:if>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L32"/>
                                 </bpel:targets>
                                 <bpel:condition>$isSuspended and  ($gOldState = 'RESERVED' or $gOldState = 'IN_PROGRESS') and $principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                 <bpel:sequence>
                                    <bpel:sources>
                                       <bpel:source linkName="L37"/>
                                    </bpel:sources>
                                    <bpel:assign name="PrepAssertion">
                                       <bpel:copy>
                                          <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                          <bpel:to variable="assertionInput"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-resume" operation="assertPrincipalInQueryResult" partnerLink="identityPL"/>
                                 </bpel:sequence>
                                 <bpel:elseif>
                                    <bpel:condition>$isSuspended and  ($gOldState = 'RESERVED' or $gOldState = 'IN_PROGRESS') and $principal = $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                    <bpel:empty name="OkToResume">
                                       <bpel:sources>
                                          <bpel:source linkName="L45"/>
                                       </bpel:sources>
                                    </bpel:empty>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>$isSuspended and $gOldState = 'READY'</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:sources>
                                          <bpel:source linkName="L33"/>
                                       </bpel:sources>
                                       <bpel:assign name="PrepAssertion">
                                          <bpel:copy>
                                             <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   { &#13;
	(: Convert the potentialOwners and excludedOwners to an identityQuery :)&#13;
	trt:toIdentityQuery( $gTaskInstance/trt:context/trt:potentialOwners, $gTaskInstance/trt:context/trt:excludedOwners )&#13;
   }&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                             <bpel:to variable="assertionInput"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:invoke inputVariable="assertionInput" name="AssertPotentialOwnerOrAdmin-resume" operation="assertPrincipalInQueryResult" partnerLink="identityPL"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:sequence>
                                       <bpel:assign name="IllegalState">
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the SUSPENDED state in order to be resumed.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="resume" partnerLink="taskOperations" variable="illegalStateFault"/>
                                    </bpel:sequence>
                                 </bpel:else>
                              </bpel:if>
                              <bpel:reply operation="resume" partnerLink="taskOperations" variable="resumeResponse">
                                 <bpel:targets>
                                    <bpel:target linkName="L38"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L46"/>
                                 </bpel:sources>
                              </bpel:reply>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L32"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','resume', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>$gTaskInstance/trt:context/trt:status = 'SUSPENDED'</bpel:from>
                                    <bpel:to variable="isSuspended"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:assign name="MarkAsResumed">
                                 <bpel:targets>
                                    <bpel:target linkName="L37"/>
                                    <bpel:target linkName="L45"/>
                                    <bpel:target linkName="L33"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L38"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from variable="gOldState"/>
                                    <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>SUSPENDED</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="gOldState"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>true</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="stateChanged"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="setOutput" partnerLink="taskOperations" variable="setOutput">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="SetOutput">
                           <bpel:variables>
                              <bpel:variable element="htdt:setOutputResponse" name="setOutputResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                              <bpel:variable name="partName" type="xsd:string">
                                 <bpel:from>
                                    <bpel:literal>unassigned</bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:sequence>
                              <bpel:assign name="PrepareSetOutput">
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','setOutput', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                                 <bpel:copy ignoreMissingFromData="yes">
                                    <bpel:from>if ( $setOutput/htdt:part ) then&#13;
$setOutput/htdt:part&#13;
else&#13;
string($gInterfaceMetadata/trt:output/trt:part[1]/@name)</bpel:from>
                                    <bpel:to variable="partName"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:if>
                                 <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                 <bpel:sequence>
                                    <bpel:assign name="illegalAccess">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have access to set output data.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="setOutput" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                 </bpel:sequence>
                                 <bpel:elseif>
                                    <bpel:condition>(count( $setOutput/htdt:part ) = 0 and count( $gInterfaceMetadata/trt:output/trt:part ) != 1)&#13;
or&#13;
count( $gInterfaceMetadata/trt:output/trt:part[@name= $partName ] ) = 0</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="illegalArgument">
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>Part name must match a part defined for the output.</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="illegalArgumentFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalArgumentFault" operation="setOutput" partnerLink="taskOperations" variable="illegalArgumentFault"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>$gTaskInstance/trt:context/trt:status != 'IN_PROGRESS'</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="IllegalState">
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the IN_PROGRESS state in order to set output.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="setOutput" partnerLink="taskOperations" variable="illegalStateFault"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:sequence>
                                       <bpel:assign name="SetOutput">
                                          <bpel:copy>
                                             <bpel:from>&lt;trt:output xmlns:trt="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-rt.xsd"&gt;&#13;
{ $gTaskInstance/trt:operational/trt:output/trt:part[not(@name=$partName)] }&#13;
   &lt;trt:part name="{$partName}"&gt;{ if ($setOutput/htdt:taskData/*) then $setOutput/htdt:taskData/* else data( $setOutput/htdt:taskData ) }&lt;/trt:part&gt;&#13;
&lt;/trt:output&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:operational/trt:output</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="setOutput" partnerLink="taskOperations" variable="setOutputResponse"/>
                                    </bpel:sequence>
                                 </bpel:else>
                              </bpel:if>
                           </bpel:sequence>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="deleteOutput" partnerLink="taskOperations" variable="deleteOutput">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="DeleteOutput">
                           <bpel:variables>
                              <bpel:variable element="htdt:deleteOutputResponse" name="deleteOutputResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <empty/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:sequence>
                              <bpel:assign name="PrepareDeleteOutput">
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','deleteOutput', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:if>
                                 <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                 <bpel:sequence>
                                    <bpel:assign name="illegalAccess">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have access to delete output data.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="deleteOutput" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                 </bpel:sequence>
                                 <bpel:elseif>
                                    <bpel:condition>$gTaskInstance/trt:context/trt:status != 'IN_PROGRESS'</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="IllegalState">
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the IN_PROGRESS state in order to delete output.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="deleteOutput" partnerLink="taskOperations" variable="illegalStateFault"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:sequence>
                                       <bpel:assign name="DeleteOutput">
                                          <bpel:copy>
                                             <bpel:from>$gNil</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:operational/trt:output</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="deleteOutput" partnerLink="taskOperations" variable="deleteOutputResponse"/>
                                    </bpel:sequence>
                                 </bpel:else>
                              </bpel:if>
                           </bpel:sequence>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="setFault" partnerLink="taskOperations" variable="setFault">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="SetFault">
                           <bpel:variables>
                              <bpel:variable element="htdt:setFaultResponse" name="setFaultResponse"/>
                           </bpel:variables>
                           <bpel:sequence>
                              <bpel:assign name="setPrincipal">
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','setFault', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:if>
                                 <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                 <bpel:sequence>
                                    <bpel:assign name="illegalAccess">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have access to set fault data.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="setFault" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                 </bpel:sequence>
                                 <bpel:elseif>
                                    <bpel:condition>not(exists($gInterfaceMetadata/trt:faults/trt:fault))</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="illegalOperation">
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>Task does not define any faults.</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="illegalOperationFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalOperationFault" operation="setFault" partnerLink="taskOperations" variable="illegalOperationFault"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>not(exists( $gInterfaceMetadata/trt:faults/trt:fault[@name=$setFault/htdt:faultName ] ))</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="illegalArgument">
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>Fault name must match a fault defined for the task's operation.</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="illegalArgumentFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalArgumentFault" operation="setFault" partnerLink="taskOperations" variable="illegalArgumentFault"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>$gTaskInstance/trt:context/trt:status != 'IN_PROGRESS'</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="IllegalState">
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the IN_PROGRESS state in order to set fault data.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="setFault" partnerLink="taskOperations" variable="illegalStateFault"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:sequence>
                                       <bpel:assign name="SetFault">
                                          <bpel:copy>
                                             <bpel:from>&lt;fault name="{ data($setFault/htdt:faultName) }"&gt;&#13;
{$setFault/htdt:faultData/*}&#13;
&lt;/fault&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:operational/trt:fault</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>
                                                   <empty/>
                                                </bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="setFaultResponse"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="setFault" partnerLink="taskOperations" variable="setFaultResponse"/>
                                    </bpel:sequence>
                                 </bpel:else>
                              </bpel:if>
                           </bpel:sequence>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="deleteFault" partnerLink="taskOperations" variable="deleteFault">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="DeleteFault">
                           <bpel:variables>
                              <bpel:variable element="htdt:deleteFaultResponse" name="deleteFaultResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <empty/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:sequence>
                              <bpel:assign name="setPrincipal">
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','deleteFault', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:if>
                                 <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                 <bpel:sequence>
                                    <bpel:assign name="illegalAccess">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have access to delete fault data.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="deleteFault" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                 </bpel:sequence>
                                 <bpel:elseif>
                                    <bpel:condition>$gTaskInstance/trt:context/trt:status != 'IN_PROGRESS'</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="IllegalState">
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the IN_PROGRESS state in order to delete fault data.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="deleteFault" partnerLink="taskOperations" variable="illegalStateFault"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:sequence>
                                       <bpel:assign name="DeleteFault">
                                          <bpel:copy>
                                             <bpel:from>$gNil</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:operational/trt:fault</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="deleteFault" partnerLink="taskOperations" variable="deleteFaultResponse"/>
                                    </bpel:sequence>
                                 </bpel:else>
                              </bpel:if>
                           </bpel:sequence>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="complete" partnerLink="taskOperations" variable="complete">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Complete">
                           <bpel:variables>
                              <bpel:variable element="htdt:completeResponse" name="completeResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L54"/>
                              </bpel:links>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L54"/>
                                 </bpel:targets>
                                 <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L55"/>
                                    </bpel:links>
                                    <bpel:assign name="illegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L55"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have access to complete task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="complete" partnerLink="taskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L55"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                                 <bpel:elseif>
                                    <bpel:condition>$gTaskInstance/trt:context/trt:status != 'IN_PROGRESS'</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L56"/>
                                       </bpel:links>
                                       <bpel:assign name="IllegalState">
                                          <bpel:sources>
                                             <bpel:source linkName="L56"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the IN_PROGRESS state in order to complete.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="complete" partnerLink="taskOperations" variable="illegalStateFault">
                                          <bpel:targets>
                                             <bpel:target linkName="L56"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                    </bpel:flow>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>exists($complete/htdt:taskData) and count( $gInterfaceMetadata/trt:output/trt:part ) != 1</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L57"/>
                                       </bpel:links>
                                       <bpel:assign name="illegalArgument">
                                          <bpel:sources>
                                             <bpel:source linkName="L57"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>Completing a task with data is only supported for tasks with a single part.</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="illegalArgumentFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalArgumentFault" operation="complete" partnerLink="taskOperations" variable="illegalArgumentFault">
                                          <bpel:targets>
                                             <bpel:target linkName="L57"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                    </bpel:flow>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>not(exists($complete/htdt:taskData)) and count($gTaskInstance/trt:operational/trt:output/trt:part) != count( $gInterfaceMetadata/trt:output/trt:part )</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L56_1"/>
                                       </bpel:links>
                                       <bpel:assign name="IllegalState">
                                          <bpel:sources>
                                             <bpel:source linkName="L56_1"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task cannot be completed without having data for its output.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="complete" partnerLink="taskOperations" variable="illegalStateFault">
                                          <bpel:targets>
                                             <bpel:target linkName="L56_1"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                    </bpel:flow>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L58"/>
                                       </bpel:links>
                                       <bpel:reply operation="complete" partnerLink="taskOperations" variable="completeResponse">
                                          <bpel:targets>
                                             <bpel:target linkName="L58"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                       <bpel:assign name="MarkAsComplete">
                                          <bpel:sources>
                                             <bpel:source linkName="L58"/>
                                          </bpel:sources>
                                          <bpel:copy ignoreMissingFromData="yes">
                                             <bpel:from>if (exists( $complete/htdt:taskData )) then&#13;
&lt;trt:output xmlns:trt="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-rt.xsd"&gt;&#13;
   &lt;trt:part name="{ string($gInterfaceMetadata/trt:output/trt:part/@name) }"&gt;{ if ($complete/htdt:taskData/*) then $complete/htdt:taskData/* else data( $complete/htdt:taskData ) }&lt;/trt:part&gt;&#13;
&lt;/trt:output&gt;&#13;
else ()</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:operational/trt:output</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="stateChanged"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>IN_PROGRESS</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="gOldState"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>COMPLETED</bpel:literal>
                                             </bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;c&gt;{ current-dateTime() }&lt;/c&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:completionTime</bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                    </bpel:flow>
                                 </bpel:else>
                              </bpel:if>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L54"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','complete', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="fail" partnerLink="taskOperations" variable="fail">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Fail">
                           <bpel:variables>
                              <bpel:variable element="htdt:failResponse" name="failResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L59"/>
                              </bpel:links>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L59"/>
                                 </bpel:targets>
                                 <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L60"/>
                                    </bpel:links>
                                    <bpel:assign name="illegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L60"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have access to fail task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="fail" partnerLink="taskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L60"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                                 <bpel:elseif>
                                    <bpel:condition>$gTaskInstance/trt:context/trt:status != 'IN_PROGRESS'</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L61"/>
                                       </bpel:links>
                                       <bpel:assign name="IllegalState">
                                          <bpel:sources>
                                             <bpel:source linkName="L61"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the IN_PROGRESS state in order to fail it.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="fail" partnerLink="taskOperations" variable="illegalStateFault">
                                          <bpel:targets>
                                             <bpel:target linkName="L61"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                    </bpel:flow>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>count( $gInterfaceMetadata/trt:faults/trt:fault ) = 0</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L62"/>
                                       </bpel:links>
                                       <bpel:assign name="illegalOperation">
                                          <bpel:sources>
                                             <bpel:source linkName="L62"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>There are no faults defined for this task.</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="illegalOperationFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalOperationFault" operation="fail" partnerLink="taskOperations" variable="illegalOperationFault">
                                          <bpel:targets>
                                             <bpel:target linkName="L62"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                    </bpel:flow>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>(not( exists( $fail/htdt:faultData ) ) and not (exists( $gTaskInstance/trt:operational/trt:fault/* ) ) )&#13;
or&#13;
( exists( $fail/htdt:faultName ) and not( exists( $gInterfaceMetadata/trt:faults/trt:fault[@name= $fail/htdt:faultName ] ) ) )</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L63"/>
                                       </bpel:links>
                                       <bpel:assign name="illegalArgument">
                                          <bpel:sources>
                                             <bpel:source linkName="L63"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>Task must be failed with one of the faults defined in its interface.</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="illegalArgumentFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalArgumentFault" operation="fail" partnerLink="taskOperations" variable="illegalArgumentFault">
                                          <bpel:targets>
                                             <bpel:target linkName="L63"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                    </bpel:flow>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L64"/>
                                       </bpel:links>
                                       <bpel:assign name="MarkAsFailed">
                                          <bpel:sources>
                                             <bpel:source linkName="L64"/>
                                          </bpel:sources>
                                          <bpel:copy ignoreMissingFromData="yes">
                                             <bpel:from>if (exists( $fail/htdt:faultName )) then&#13;
&lt;trt:fault xmlns:trt="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-rt.xsd" name="{ data($fail/htdt:faultName) }"&gt;&#13;
   { if ($fail/htdt:faultData/*) then $fail/htdt:faultData/* else data( $fail/htdt:faultData ) }&#13;
&lt;/trt:fault&gt;&#13;
else ()</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:operational/trt:fault</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="stateChanged"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>IN_PROGRESS</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="gOldState"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>FAILED</bpel:literal>
                                             </bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;c&gt;{ current-dateTime() }&lt;/c&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:completionTime</bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="fail" partnerLink="taskOperations" variable="failResponse">
                                          <bpel:targets>
                                             <bpel:target linkName="L64"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                    </bpel:flow>
                                 </bpel:else>
                              </bpel:if>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L59"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','fail', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="setPriority" partnerLink="taskOperations" variable="setPriority">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="SetPriority">
                           <bpel:variables>
                              <bpel:variable element="htdt:setPriorityResponse" name="setPriorityResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L71"/>
                                    </bpel:links>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="setPriority" partnerLink="taskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L71"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                    <bpel:assign name="illegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L71"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have access to set the priority of the task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                 </bpel:flow>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L68"/>
                                 <bpel:link name="L66"/>
                                 <bpel:link name="L65"/>
                                 <bpel:link name="L69"/>
                              </bpel:links>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L66"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L68"/>
                                 </bpel:sources>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:completionTime != ''</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L67"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalState">
                                       <bpel:sources>
                                          <bpel:source linkName="L67"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Tasks cannot have their priority changed after they reach a final state.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                          <bpel:to variable="illegalStateFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalStateFault" operation="setPriority" partnerLink="taskOperations" variable="illegalStateFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L67"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                              </bpel:if>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L65"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L66"/>
                                 </bpel:sources>
                                 <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L70"/>
                                    </bpel:links>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-setPriority" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                       <bpel:targets>
                                          <bpel:target linkName="L70"/>
                                       </bpel:targets>
                                    </bpel:invoke>
                                    <bpel:assign name="PrepAssertion">
                                       <bpel:sources>
                                          <bpel:source linkName="L70"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                          <bpel:to variable="assertionInput"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                 </bpel:flow>
                              </bpel:if>
                              <bpel:reply operation="setPriority" partnerLink="taskOperations" variable="setPriorityResponse">
                                 <bpel:targets>
                                    <bpel:target linkName="L69"/>
                                 </bpel:targets>
                              </bpel:reply>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L65"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','setPriority', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:assign name="SetPriority">
                                 <bpel:targets>
                                    <bpel:target linkName="L68"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L69"/>
                                 </bpel:sources>
                                 <bpel:copy ignoreMissingFromData="yes">
                                    <bpel:from>$setPriority/htdt:priority</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:priority</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>true</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="dataUpdated"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="skip" partnerLink="taskOperations" variable="skip">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Skip">
                           <bpel:variables>
                              <bpel:variable element="htdt:skipResponse" name="skipResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L79"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L79"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have rights to skip the task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="skip" partnerLink="taskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L79"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L73"/>
                                 <bpel:link name="L72"/>
                              </bpel:links>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L73"/>
                                 </bpel:targets>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:isSkipable != 'true'</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L74"/>
                                    </bpel:links>
                                    <bpel:assign name="illegalOperation">
                                       <bpel:sources>
                                          <bpel:source linkName="L74"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>Task is not skipable.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalOperationFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalOperationFault" operation="skip" partnerLink="taskOperations" variable="illegalOperationFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L74"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                                 <bpel:elseif>
                                    <bpel:condition>$gTaskInstance/trt:context/trt:completionTime != ''</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L75"/>
                                       </bpel:links>
                                       <bpel:assign name="IllegalState">
                                          <bpel:sources>
                                             <bpel:source linkName="L75"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Tasks cannot be skipped after they reach a final state.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="skip" partnerLink="taskOperations" variable="illegalStateFault">
                                          <bpel:targets>
                                             <bpel:target linkName="L75"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                    </bpel:flow>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L76"/>
                                       </bpel:links>
                                       <bpel:reply operation="skip" partnerLink="taskOperations" variable="skipResponse">
                                          <bpel:targets>
                                             <bpel:target linkName="L76"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                       <bpel:assign name="MarkAsObsolete">
                                          <bpel:sources>
                                             <bpel:source linkName="L76"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="stateChanged"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>$gTaskInstance/trt:context/trt:status</bpel:from>
                                             <bpel:to variable="gOldState"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>OBSOLETE</bpel:literal>
                                             </bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;c&gt;{ current-dateTime() }&lt;/c&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:completionTime</bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                    </bpel:flow>
                                 </bpel:else>
                              </bpel:if>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L72"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L73"/>
                                 </bpel:sources>
                                 <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner and $principal != $gTaskInstance/trt:context/trt:taskInitiator</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L70_1"/>
                                    </bpel:links>
                                    <bpel:assign name="PrepAssertion">
                                       <bpel:sources>
                                          <bpel:source linkName="L70_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                          <bpel:to variable="assertionInput"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-skip" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                       <bpel:targets>
                                          <bpel:target linkName="L70_1"/>
                                       </bpel:targets>
                                    </bpel:invoke>
                                 </bpel:flow>
                              </bpel:if>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L72"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','skip', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="forward" partnerLink="taskOperations" variable="forward">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Forward">
                           <bpel:variables>
                              <bpel:variable element="htdt:forwardResponse" name="forwardResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L80"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L80"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have rights to forward the task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="forward" partnerLink="taskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L80"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L81"/>
                                 <bpel:link name="L78"/>
                              </bpel:links>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L81"/>
                                 </bpel:targets>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:status != 'READY' and $gTaskInstance/trt:context/trt:status != 'IN_PROGRESS' and $gTaskInstance/trt:context/trt:status != 'RESERVED'</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L82"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalState">
                                       <bpel:sources>
                                          <bpel:source linkName="L82"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in an active state in order to be forwarded.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                          <bpel:to variable="illegalStateFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalStateFault" operation="forward" partnerLink="taskOperations" variable="illegalStateFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L82"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                                 <bpel:elseif>
                                    <bpel:condition>count($gTaskInstance/trt:context/trt:potentialOwners/htd:users/htd:user) = 0</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L82_1"/>
                                       </bpel:links>
                                       <bpel:assign name="IllegalState_GroupsInPotOwners">
                                          <bpel:sources>
                                             <bpel:source linkName="L82_1"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Tasks can only be forwarded when the potential owners role consists of a list of users.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="forward" partnerLink="taskOperations" variable="illegalStateFault">
                                          <bpel:targets>
                                             <bpel:target linkName="L82_1"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                    </bpel:flow>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>count($forward/htdt:organizationalEntity/htd:users/htd:user) = 0</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L83"/>
                                       </bpel:links>
                                       <bpel:reply faultName="htaw:illegalArgumentFault" operation="forward" partnerLink="taskOperations" variable="illegalArgumentFault">
                                          <bpel:targets>
                                             <bpel:target linkName="L83"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                       <bpel:assign name="illegalArgument">
                                          <bpel:sources>
                                             <bpel:source linkName="L83"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>Forward request must include a list of users.</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="illegalArgumentFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                    </bpel:flow>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L84"/>
                                       </bpel:links>
                                       <bpel:reply operation="forward" partnerLink="taskOperations" variable="forwardResponse">
                                          <bpel:targets>
                                             <bpel:target linkName="L84"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                       <bpel:assign name="MarkAsForwarded">
                                          <bpel:sources>
                                             <bpel:source linkName="L84"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>$gTaskInstance/trt:context/trt:status != 'READY'</bpel:from>
                                             <bpel:to variable="stateChanged"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>$gTaskInstance/trt:context/trt:status</bpel:from>
                                             <bpel:to variable="gOldState"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>READY</bpel:literal>
                                             </bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;po&gt;&#13;
		&lt;htd:users&gt;&#13;
			{ (: Copy all of the existing potential owners minus the person doing the forwarding. Then copy all of the new names in.  :)&#13;
			$gTaskInstance/trt:context/trt:potentialOwners/htd:users/htd:user[text() != $principal ] &#13;
			}&#13;
			{ $forward/htdt:organizationalEntity/htd:users/htd:user }&#13;
		&lt;/htd:users&gt;&#13;
&lt;/po&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:potentialOwners</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from variable="gNil"/>
                                             <bpel:to>$gTaskInstance/trt:context/trt:actualOwner</bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                    </bpel:flow>
                                 </bpel:else>
                              </bpel:if>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L78"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L81"/>
                                 </bpel:sources>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:status = 'READY'</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L77"/>
                                    </bpel:links>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertPotentialOwnerOrAdmin-forward" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                       <bpel:targets>
                                          <bpel:target linkName="L77"/>
                                       </bpel:targets>
                                    </bpel:invoke>
                                    <bpel:assign name="PrepAssertion">
                                       <bpel:sources>
                                          <bpel:source linkName="L77"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   { &#13;
	(: Convert the potentialOwners and excludedOwners to an identityQuery :)&#13;
	trt:toIdentityQuery( $gTaskInstance/trt:context/trt:potentialOwners, $gTaskInstance/trt:context/trt:excludedOwners )&#13;
   }&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                          <bpel:to variable="assertionInput"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                 </bpel:flow>
                                 <bpel:elseif>
                                    <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L70_1_1"/>
                                       </bpel:links>
                                       <bpel:assign name="PrepAssertion">
                                          <bpel:sources>
                                             <bpel:source linkName="L70_1_1"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                             <bpel:to variable="assertionInput"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-forward" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                          <bpel:targets>
                                             <bpel:target linkName="L70_1_1"/>
                                          </bpel:targets>
                                       </bpel:invoke>
                                    </bpel:flow>
                                 </bpel:elseif>
                              </bpel:if>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L78"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','forward', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="delegate" partnerLink="taskOperations" variable="delegate">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Delegate">
                           <bpel:variables>
                              <bpel:variable element="htdt:delegateResponse" name="delegateResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                              <bpel:variable element="htdt:recipientNotAllowed" name="recipientNotAllowedFault"/>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L95"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L95"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have rights to delegate the task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="delegate" partnerLink="taskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L95"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L92"/>
                                 <bpel:link name="L90"/>
                                 <bpel:link name="L94"/>
                                 <bpel:link name="L93"/>
                                 <bpel:link name="L91"/>
                                 <bpel:link name="L85"/>
                                 <bpel:link name="L86"/>
                                 <bpel:link name="L89"/>
                              </bpel:links>
                              <bpel:assign name="RecipientNotAllowed">
                                 <bpel:targets>
                                    <bpel:target linkName="L94"/>
                                    <bpel:target linkName="L93"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L92"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>
                                          <recipientNotAllowed xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl">Task cannot be assigned to the given user.</recipientNotAllowed>
                                       </bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="recipientNotAllowedFault"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L86"/>
                                 </bpel:targets>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:status != 'READY' and $gTaskInstance/trt:context/trt:status != 'IN_PROGRESS' and $gTaskInstance/trt:context/trt:status != 'RESERVED'</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L87"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalState">
                                       <bpel:sources>
                                          <bpel:source linkName="L87"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in an active state in order to be delegated.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                          <bpel:to variable="illegalStateFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalStateFault" operation="delegate" partnerLink="taskOperations" variable="illegalStateFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L87"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                                 <bpel:elseif>
                                    <bpel:condition>count($delegate/htdt:organizationalEntity/htd:users/htd:user) != 1</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L88"/>
                                       </bpel:links>
                                       <bpel:assign name="illegalArgument">
                                          <bpel:sources>
                                             <bpel:source linkName="L88"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>Delegate request must include a single user to become the owner of the task.</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="illegalArgumentFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalArgumentFault" operation="delegate" partnerLink="taskOperations" variable="illegalArgumentFault">
                                          <bpel:targets>
                                             <bpel:target linkName="L88"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                    </bpel:flow>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>$gDelegation/@potentialDelegatees = 'potentialOwners' or $gDelegation/@potentialDelegatees='other'</bpel:condition>
                                    <bpel:scope>
                                       <bpel:faultHandlers>
                                          <bpel:catch faultName="aeid:searchFault">
                                             <bpel:empty name="RecipientNotAllowed">
                                                <bpel:sources>
                                                   <bpel:source linkName="L94"/>
                                                </bpel:sources>
                                             </bpel:empty>
                                          </bpel:catch>
                                       </bpel:faultHandlers>
                                       <bpel:flow>
                                          <bpel:links>
                                             <bpel:link name="L77_1_1"/>
                                          </bpel:links>
                                          <bpel:assign name="PrepAssertion">
                                             <bpel:sources>
                                                <bpel:source linkName="L77_1_1"/>
                                             </bpel:sources>
                                             <bpel:copy>
                                                <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ data( $delegate/htdt:organizationalEntity/htd:users/htd:user)  }&lt;/aeid:principalName&gt;&#13;
   { &#13;
	if ( $gDelegation/@potentialDelegatees = 'potentialOwners' ) then&#13;
		(: Convert the potentialOwners and excludedOwners to an identityQuery :)&#13;
		trt:toIdentityQuery( $gTaskInstance/trt:context/trt:potentialOwners, $gTaskInstance/trt:context/trt:excludedOwners )&#13;
	else&#13;
		trt:toIdentityQuery( $gDelegation/htd:from/htd:literal/* )&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                                <bpel:to variable="assertionInput"/>
                                             </bpel:copy>
                                          </bpel:assign>
                                          <bpel:invoke inputVariable="assertionInput" name="AssertRecipientAllowed" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                             <bpel:targets>
                                                <bpel:target linkName="L77_1_1"/>
                                             </bpel:targets>
                                             <bpel:sources>
                                                <bpel:source linkName="L90"/>
                                             </bpel:sources>
                                          </bpel:invoke>
                                       </bpel:flow>
                                    </bpel:scope>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>$gDelegation/@potentialDelegatees = 'nobody'</bpel:condition>
                                    <bpel:empty name="RecipientNotAllowed">
                                       <bpel:sources>
                                          <bpel:source linkName="L93"/>
                                       </bpel:sources>
                                    </bpel:empty>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:empty name="OkToDelegate">
                                       <bpel:sources>
                                          <bpel:source linkName="L91"/>
                                       </bpel:sources>
                                    </bpel:empty>
                                 </bpel:else>
                              </bpel:if>
                              <bpel:reply operation="delegate" partnerLink="taskOperations" variable="delegateResponse">
                                 <bpel:targets>
                                    <bpel:target linkName="L89"/>
                                 </bpel:targets>
                              </bpel:reply>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L85"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','delegate', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L85"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L86"/>
                                 </bpel:sources>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:status = 'READY'</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L77_1"/>
                                    </bpel:links>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertPotentialOwnerOrAdmin-delegate" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                       <bpel:targets>
                                          <bpel:target linkName="L77_1"/>
                                       </bpel:targets>
                                    </bpel:invoke>
                                    <bpel:assign name="PrepAssertion">
                                       <bpel:sources>
                                          <bpel:source linkName="L77_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   { &#13;
	(: Convert the potentialOwners and excludedOwners to an identityQuery :)&#13;
	trt:toIdentityQuery( $gTaskInstance/trt:context/trt:potentialOwners, $gTaskInstance/trt:context/trt:excludedOwners )&#13;
   }&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                          <bpel:to variable="assertionInput"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                 </bpel:flow>
                                 <bpel:elseif>
                                    <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L70_1_1_1"/>
                                       </bpel:links>
                                       <bpel:assign name="PrepAssertion">
                                          <bpel:sources>
                                             <bpel:source linkName="L70_1_1_1"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                             <bpel:to variable="assertionInput"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-delegate" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                          <bpel:targets>
                                             <bpel:target linkName="L70_1_1_1"/>
                                          </bpel:targets>
                                       </bpel:invoke>
                                    </bpel:flow>
                                 </bpel:elseif>
                              </bpel:if>
                              <bpel:assign name="MarkAsDelegated">
                                 <bpel:targets>
                                    <bpel:target linkName="L90"/>
                                    <bpel:target linkName="L91"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L89"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>$gTaskInstance/trt:context/trt:status != 'RESERVED'</bpel:from>
                                    <bpel:to variable="stateChanged"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>$gTaskInstance/trt:context/trt:status</bpel:from>
                                    <bpel:to variable="gOldState"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>RESERVED</bpel:literal>
                                    </bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;owner&gt;{ data( $delegate/htdt:organizationalEntity/htd:users/htd:user ) }&lt;/owner&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:actualOwner</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>true</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="dataUpdated"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:reply faultName="htaw:recipientNotAllowed" operation="delegate" partnerLink="taskOperations" variable="recipientNotAllowedFault">
                                 <bpel:targets>
                                    <bpel:target linkName="L92"/>
                                 </bpel:targets>
                              </bpel:reply>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="resume" partnerLink="internal" variable="resumeTaskRequest">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:if name="InternalResume">
                           <bpel:condition>$gTaskInstance/trt:context/trt:status = 'SUSPENDED' and $resumeTaskRequest/tsw:resumerId = $gScheduleWakeupResponse</bpel:condition>
                           <bpel:assign name="MarkAsResumed">
                              <bpel:copy>
                                 <bpel:from variable="gOldState"/>
                                 <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                              </bpel:copy>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>SUSPENDED</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="gOldState"/>
                              </bpel:copy>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>true</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="stateChanged"/>
                              </bpel:copy>
                              <bpel:copy>
                                 <bpel:from variable="gNil"/>
                                 <bpel:to variable="gScheduleWakeupResponse"/>
                              </bpel:copy>
                           </bpel:assign>
                        </bpel:if>
                     </bpel:onMessage>
                     <bpel:onMessage operation="activate" partnerLink="taskOperations" variable="activate">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Activate">
                           <bpel:variables>
                              <bpel:variable element="htdt:activateResponse" name="activateResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <emptyResponse xmlns:ns1="http://www.activebpel.org/b4p/2007/10/wshumantask/aeb4p-task-escalations.wsdl" xmlns:ns2="http://www.activebpel.org/b4p/2007/12/wshumantask/aeb4p-task-notification.wsdl" xmlns:ns3="http://schemas.active-endpoints.com/b4p/wshumantask/2007/12/aeb4p-task-custom-notification.xsd" xmlns:ns4="http://www.activebpel.org/b4p/2007/10/wshumantask/taskLifecycle.wsdl" xmlns:ns5="http://docs.active-endpoints/wsdl/activebpeladmin/2007/01/activebpeladmin.wsdl"/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L8"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L8"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have rights to activate the task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="activate" partnerLink="taskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L8"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L1"/>
                                 <bpel:link name="L2"/>
                                 <bpel:link name="L3"/>
                              </bpel:links>
                              <bpel:sequence>
                                 <bpel:assign name="PrepAssertion">
                                    <bpel:copy>
                                       <bpel:from>string(abx:getMyRoleProperty('taskOperations','activate', 'abx:principal'))</bpel:from>
                                       <bpel:to variable="principal"/>
                                    </bpel:copy>
                                    <bpel:copy>
                                       <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                       <bpel:to variable="assertionInput"/>
                                    </bpel:copy>
                                 </bpel:assign>
                                 <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-activate" operation="assertPrincipalInQueryResult" partnerLink="identityPL"/>
                                 <bpel:if>
                                    <bpel:condition>$gTaskInstance/trt:context/trt:status = 'CREATED'&#13;
and&#13;
count( $gTaskInstance/trt:context/trt:potentialOwners/htd:users/htd:user ) = 1&#13;
and&#13;
count( $gTaskInstance/trt:context/trt:excludedOwners/* ) = 0</bpel:condition>
                                    <bpel:assign name="AutoClaim">
                                       <bpel:sources>
                                          <bpel:source linkName="L1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>RESERVED</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="gTaskInstance">
                                             <bpel:query>trt:context/trt:status</bpel:query>
                                          </bpel:to>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>$gTaskInstance/trt:context/trt:potentialOwners/htd:users/htd:user</bpel:from>
                                          <bpel:to variable="gTaskInstance">
                                             <bpel:query>trt:context/trt:actualOwner</bpel:query>
                                          </bpel:to>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:elseif>
                                       <bpel:condition>$gTaskInstance/trt:context/trt:status = 'CREATED'</bpel:condition>
                                       <bpel:assign name="MarkAsReady">
                                          <bpel:sources>
                                             <bpel:source linkName="L2"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>READY</bpel:literal>
                                             </bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                    </bpel:elseif>
                                    <bpel:else>
                                       <bpel:flow>
                                          <bpel:links>
                                             <bpel:link name="L4"/>
                                          </bpel:links>
                                          <bpel:assign name="IllegalState">
                                             <bpel:sources>
                                                <bpel:source linkName="L4"/>
                                             </bpel:sources>
                                             <bpel:copy>
                                                <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in the CREATED state in order to be activated.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                                <bpel:to variable="illegalStateFault"/>
                                             </bpel:copy>
                                          </bpel:assign>
                                          <bpel:reply faultName="htaw:illegalStateFault" operation="activate" partnerLink="taskOperations" variable="illegalStateFault">
                                             <bpel:targets>
                                                <bpel:target linkName="L4"/>
                                             </bpel:targets>
                                          </bpel:reply>
                                       </bpel:flow>
                                    </bpel:else>
                                 </bpel:if>
                              </bpel:sequence>
                              <bpel:assign name="StateChanged">
                                 <bpel:targets>
                                    <bpel:target linkName="L1"/>
                                    <bpel:target linkName="L2"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L3"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>CREATED</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="gOldState"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>true</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="stateChanged"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;lmb&gt;{ $principal }&lt;/lmb&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;lm&gt;{ current-dateTime()}&lt;/lm&gt;</bpel:from>
                                    <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:reply operation="activate" partnerLink="taskOperations" variable="activateResponse">
                                 <bpel:targets>
                                    <bpel:target linkName="L3"/>
                                 </bpel:targets>
                              </bpel:reply>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="addComment" partnerLink="taskOperations" variable="addComment">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="AddComment">
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L80_1"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L80_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have rights to add a comment to the task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="addComment" partnerLink="taskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L80_1"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L105"/>
                                 <bpel:link name="L103"/>
                              </bpel:links>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L105"/>
                                 </bpel:targets>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:completionTime != ''</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L104"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalState">
                                       <bpel:sources>
                                          <bpel:source linkName="L104"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in an active state in order to add a comment.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                          <bpel:to variable="illegalStateFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalStateFault" operation="addComment" partnerLink="taskOperations" variable="illegalStateFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L104"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                                 <bpel:else>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L106"/>
                                       </bpel:links>
                                       <bpel:assign name="AddComment">
                                          <bpel:sources>
                                             <bpel:source linkName="L106"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>&lt;comments&gt;&#13;
   &lt;htapi:comment&gt;&#13;
      &lt;htapi:addedAt&gt;{ current-dateTime() }&lt;/htapi:addedAt&gt;&#13;
      &lt;htapi:addedBy&gt;{ $principal }&lt;/htapi:addedBy&gt;&#13;
      &lt;htapi:text&gt;{ data($addComment/htdt:text) }&lt;/htapi:text&gt;&#13;
      &lt;trt:commentId&gt;{ $gNextCommentId }&lt;/trt:commentId&gt;&#13;
   &lt;/htapi:comment&gt;&#13;
   {$gTaskInstance/trt:operational/trt:comments/*}&#13;
&lt;/comments&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:operational/trt:comments</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>$gNextCommentId + 1</bpel:from>
                                             <bpel:to variable="gNextCommentId"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>
                                                   <empty/>
                                                </bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="addCommentResponse"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="addComment" partnerLink="taskOperations" variable="addCommentResponse">
                                          <bpel:targets>
                                             <bpel:target linkName="L106"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                    </bpel:flow>
                                 </bpel:else>
                              </bpel:if>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L103"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L105"/>
                                 </bpel:sources>
                                 <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L77_3"/>
                                    </bpel:links>
                                    <bpel:assign name="PrepAssertion">
                                       <bpel:sources>
                                          <bpel:source linkName="L77_3"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>let $taskUsers := if ($gIsTask) then $gTaskInstance/trt:context/trt:potentialOwners &#13;
else $gTaskInstance/trt:context/trt:recipients&#13;
let $taskUsersQuery := if ($gIsTask) then trt:toIdentityQuery( $taskUsers , $gTaskInstance/trt:context/trt:excludedOwners )&#13;
else trt:toIdentityQuery( $taskUsers )&#13;
&#13;
return&#13;
&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   { $taskUsersQuery }&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                          <bpel:to variable="assertionInput"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertPotentialOwnerOrAdmin-addComment" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                       <bpel:targets>
                                          <bpel:target linkName="L77_3"/>
                                       </bpel:targets>
                                    </bpel:invoke>
                                 </bpel:flow>
                              </bpel:if>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L103"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','addComment', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="updateComment" partnerLink="aeTaskOperations" variable="updateComment">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="UpdateComment">
                           <bpel:variables>
                              <bpel:variable element="htapi:comment" name="comment">
                                 <bpel:from>if (exists($gTaskInstance/trt:operational/trt:comments/htapi:comment[trt:commentId = $updateComment/trt:commentId ])) then&#13;
$gTaskInstance/trt:operational/trt:comments/htapi:comment[trt:commentId = $updateComment/trt:commentId ]&#13;
else&#13;
$gNil</bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L108"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L108"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have rights to update the comment.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="ts:illegalAccessFault" operation="updateComment" partnerLink="aeTaskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L108"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L109"/>
                                 <bpel:link name="L107"/>
                              </bpel:links>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L109"/>
                                 </bpel:targets>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:completionTime != ''</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L111"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalState">
                                       <bpel:sources>
                                          <bpel:source linkName="L111"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in an active state in order to update a comment.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                          <bpel:to variable="illegalStateFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="ts:illegalStateFault" operation="updateComment" partnerLink="aeTaskOperations" variable="illegalStateFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L111"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                                 <bpel:elseif>
                                    <bpel:condition>$comment = $gNil</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L108_2"/>
                                       </bpel:links>
                                       <bpel:assign name="IllegalArgument">
                                          <bpel:sources>
                                             <bpel:source linkName="L108_2"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>Comment not found.</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="illegalArgumentFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="ts:illegalArgumentFault" operation="updateComment" partnerLink="aeTaskOperations" variable="illegalArgumentFault">
                                          <bpel:targets>
                                             <bpel:target linkName="L108_2"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                    </bpel:flow>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L112"/>
                                       </bpel:links>
                                       <bpel:reply operation="updateComment" partnerLink="aeTaskOperations">
                                          <bpel:targets>
                                             <bpel:target linkName="L112"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                       <bpel:assign name="UpdateComment">
                                          <bpel:sources>
                                             <bpel:source linkName="L112"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>&lt;comment&gt;&#13;
 { $comment/htapi:addedAt }&#13;
 { $comment/htapi:addedBy }&#13;
 &lt;htapi:text&gt;{ data($updateComment/tsw:text) }&lt;/htapi:text&gt;&#13;
 {$comment/trt:commentId}&#13;
 &lt;trt:modified&gt;&#13;
  &lt;trt:modifiedAt&gt;{ current-dateTime() }&lt;/trt:modifiedAt&gt;&#13;
  &lt;trt:modifiedBy&gt;{ $principal }&lt;/trt:modifiedBy&gt;&#13;
 &lt;/trt:modified&gt;&#13;
&lt;/comment&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:operational/trt:comments/htapi:comment[trt:commentId = $comment/trt:commentId ]</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                    </bpel:flow>
                                 </bpel:else>
                              </bpel:if>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L107"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L109"/>
                                 </bpel:sources>
                                 <bpel:condition>$principal != $comment/htapi:addedBy</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L77_3_1"/>
                                    </bpel:links>
                                    <bpel:assign name="PrepAssertion">
                                       <bpel:sources>
                                          <bpel:source linkName="L77_3_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                          <bpel:to variable="assertionInput"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-updateComment" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                       <bpel:targets>
                                          <bpel:target linkName="L77_3_1"/>
                                       </bpel:targets>
                                    </bpel:invoke>
                                 </bpel:flow>
                              </bpel:if>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L107"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('aeTaskOperations','updateComment', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="deleteComment" partnerLink="aeTaskOperations" variable="deleteComment">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="DeleteComment">
                           <bpel:variables>
                              <bpel:variable element="htapi:comment" name="comment">
                                 <bpel:from>if (exists($gTaskInstance/trt:operational/trt:comments/htapi:comment[trt:commentId = $deleteComment/trt:commentId ])) then&#13;
$gTaskInstance/trt:operational/trt:comments/htapi:comment[trt:commentId = $deleteComment/trt:commentId ]&#13;
else&#13;
$gNil</bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L108_1"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L108_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User does not have rights to delete the comment.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="ts:illegalAccessFault" operation="deleteComment" partnerLink="aeTaskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L108_1"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L109_1"/>
                                 <bpel:link name="L107_1"/>
                              </bpel:links>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L109_1"/>
                                 </bpel:targets>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:completionTime != ''</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L111_1"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalState">
                                       <bpel:sources>
                                          <bpel:source linkName="L111_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in an active state in order to delete a comment.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                          <bpel:to variable="illegalStateFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="ts:illegalStateFault" operation="deleteComment" partnerLink="aeTaskOperations" variable="illegalStateFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L111_1"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                                 <bpel:elseif>
                                    <bpel:condition>$comment = $gNil</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L108_1_1"/>
                                       </bpel:links>
                                       <bpel:assign name="IllegalArgument">
                                          <bpel:sources>
                                             <bpel:source linkName="L108_1_1"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>Comment not found.</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="illegalArgumentFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="ts:illegalAccessFault" operation="deleteComment" partnerLink="aeTaskOperations" variable="illegalAccessFault">
                                          <bpel:targets>
                                             <bpel:target linkName="L108_1_1"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                    </bpel:flow>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L112_1"/>
                                       </bpel:links>
                                       <bpel:reply operation="deleteComment" partnerLink="aeTaskOperations">
                                          <bpel:targets>
                                             <bpel:target linkName="L112_1"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                       <bpel:assign name="DeleteComment">
                                          <bpel:sources>
                                             <bpel:source linkName="L112_1"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>&lt;comments&gt;&#13;
{ $gTaskInstance/trt:operational/trt:comments/htapi:comment[trt:commentId != $deleteComment/trt:commentId ] }&#13;
&lt;/comments&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:operational/trt:comments</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedBy</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:lastModifiedTime</bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                    </bpel:flow>
                                 </bpel:else>
                              </bpel:if>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L107_1"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L109_1"/>
                                 </bpel:sources>
                                 <bpel:condition>$principal != $comment/htapi:addedBy</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L77_3_1_1"/>
                                    </bpel:links>
                                    <bpel:assign name="PrepAssertion">
                                       <bpel:sources>
                                          <bpel:source linkName="L77_3_1_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                          <bpel:to variable="assertionInput"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-deleteComment" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                       <bpel:targets>
                                          <bpel:target linkName="L77_3_1_1"/>
                                       </bpel:targets>
                                    </bpel:invoke>
                                 </bpel:flow>
                              </bpel:if>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L107_1"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('aeTaskOperations','deleteComment', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="activate" partnerLink="internal" variable="activateTaskRequest">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:flow>
                           <bpel:links>
                              <bpel:link name="AutoClaimToStateChanged"/>
                              <bpel:link name="ActivatedToStateChanged"/>
                           </bpel:links>
                           <bpel:assign name="StateChanged">
                              <bpel:targets>
                                 <bpel:target linkName="AutoClaimToStateChanged"/>
                                 <bpel:target linkName="ActivatedToStateChanged"/>
                              </bpel:targets>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>CREATED</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="gOldState"/>
                              </bpel:copy>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>true</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="stateChanged"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:if name="ActivateCheck">
                              <bpel:condition>$gTaskInstance/trt:context/trt:status = 'CREATED'&#13;
and&#13;
count( $gTaskInstance/trt:context/trt:potentialOwners/htd:users/htd:user ) = 1&#13;
and&#13;
count( $gTaskInstance/trt:context/trt:excludedOwners/* ) = 0</bpel:condition>
                              <bpel:assign name="AutoClaim">
                                 <bpel:sources>
                                    <bpel:source linkName="AutoClaimToStateChanged"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>RESERVED</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="gTaskInstance">
                                       <bpel:query>trt:context/trt:status</bpel:query>
                                    </bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>$gTaskInstance/trt:context/trt:potentialOwners/htd:users/htd:user</bpel:from>
                                    <bpel:to variable="gTaskInstance">
                                       <bpel:query>trt:context/trt:actualOwner</bpel:query>
                                    </bpel:to>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:elseif>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:status = 'CREATED'</bpel:condition>
                                 <bpel:assign name="MarkAsReady">
                                    <bpel:sources>
                                       <bpel:source linkName="ActivatedToStateChanged"/>
                                    </bpel:sources>
                                    <bpel:copy>
                                       <bpel:from>
                                          <bpel:literal>READY</bpel:literal>
                                       </bpel:from>
                                       <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                    </bpel:copy>
                                 </bpel:assign>
                              </bpel:elseif>
                           </bpel:if>
                        </bpel:flow>
                     </bpel:onMessage>
                     <bpel:onMessage operation="expire" partnerLink="internal" variable="expire">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:if name="Expire">
                           <bpel:condition>$gTaskInstance/trt:context/trt:completionTime = ''</bpel:condition>
                           <bpel:assign name="MarkAsExpired">
                              <bpel:copy>
                                 <bpel:from>$gTaskInstance/trt:context/trt:status</bpel:from>
                                 <bpel:to variable="gOldState"/>
                              </bpel:copy>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>EXITED</bpel:literal>
                                 </bpel:from>
                                 <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                              </bpel:copy>
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>true</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="stateChanged"/>
                              </bpel:copy>
                              <bpel:copy>
                                 <bpel:from>&lt;ct&gt;{ current-dateTime() }&lt;/ct&gt;</bpel:from>
                                 <bpel:to>$gTaskInstance/trt:context/trt:completionTime</bpel:to>
                              </bpel:copy>
                           </bpel:assign>
                        </bpel:if>
                     </bpel:onMessage>
                     <bpel:onMessage operation="addTaskStateChangeListener" partnerLink="taskStateChangeRegistryPL" variable="addTaskStateChangeListener">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:if name="AddListener">
                           <bpel:condition>$gTaskInstance/trt:context/trt:completionTime = ''</bpel:condition>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L135"/>
                              </bpel:links>
                              <bpel:reply operation="addTaskStateChangeListener" partnerLink="taskStateChangeRegistryPL" variable="addTaskStateChangeListenerResponse">
                                 <bpel:targets>
                                    <bpel:target linkName="L135"/>
                                 </bpel:targets>
                              </bpel:reply>
                              <bpel:assign name="AddListener">
                                 <bpel:sources>
                                    <bpel:source linkName="L135"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>&lt;listeners&gt;&#13;
{ $gListenerList/tewt:taskListener }&#13;
&lt;tewt:taskListener&gt;&#13;
   &lt;tewt:listenerId&gt;{$gNextListenerId}&lt;/tewt:listenerId&gt;&#13;
   { $addTaskStateChangeListener/sref:service-ref }&#13;
&lt;/tewt:taskListener&gt;&#13;
&lt;/listeners&gt;</bpel:from>
                                    <bpel:to variable="gListenerList"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from variable="gNextListenerId"/>
                                    <bpel:to variable="addTaskStateChangeListenerResponse"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>$gNextListenerId + 1</bpel:from>
                                    <bpel:to variable="gNextListenerId"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                           <bpel:else>
                              <bpel:flow>
                                 <bpel:links>
                                    <bpel:link name="L137"/>
                                 </bpel:links>
                                 <bpel:reply faultName="tew:illegalStateFault" operation="addTaskStateChangeListener" partnerLink="taskStateChangeRegistryPL" variable="illegalStateFault">
                                    <bpel:targets>
                                       <bpel:target linkName="L137"/>
                                    </bpel:targets>
                                 </bpel:reply>
                                 <bpel:assign name="IllegalState">
                                    <bpel:sources>
                                       <bpel:source linkName="L137"/>
                                    </bpel:sources>
                                    <bpel:copy>
                                       <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task is already in a final state.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                       <bpel:to variable="illegalStateFault"/>
                                    </bpel:copy>
                                 </bpel:assign>
                              </bpel:flow>
                           </bpel:else>
                        </bpel:if>
                     </bpel:onMessage>
                     <bpel:onMessage operation="escalate" partnerLink="internal" variable="escalate">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:assign name="MarkAsEscalated">
                           <bpel:copy>
                              <bpel:from>&lt;escalated&gt;{ current-dateTime() }&lt;/escalated&gt;</bpel:from>
                              <bpel:to variable="gTaskInstance">
                                 <bpel:query>trt:context/trt:lastEscalatedTime</bpel:query>
                              </bpel:to>
                           </bpel:copy>
                           <bpel:copy>
                              <bpel:from>
                                 <bpel:literal>true</bpel:literal>
                              </bpel:from>
                              <bpel:to variable="dataUpdated"/>
                           </bpel:copy>
                        </bpel:assign>
                     </bpel:onMessage>
                     <bpel:onMessage operation="reassign" partnerLink="internal" variable="reassign">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:if name="Reassign">
                           <bpel:condition>$gTaskInstance/trt:context/trt:completionTime = ''</bpel:condition>
                           <bpel:assign name="UpdatePotentialOwners">
                              <bpel:copy>
                                 <bpel:from>
                                    <bpel:literal>true</bpel:literal>
                                 </bpel:from>
                                 <bpel:to variable="dataUpdated"/>
                              </bpel:copy>
                              <bpel:copy>
                                 <bpel:from>$reassign/htd:organizationalEntity</bpel:from>
                                 <bpel:to>$gTaskInstance/trt:context/trt:potentialOwners</bpel:to>
                              </bpel:copy>
                              <bpel:copy>
                                 <bpel:from>if (count( $reassign/htd:organizationalEntity/htd:users/htd:user ) = 1) then&#13;
$reassign/htd:organizationalEntity/htd:users/htd:user&#13;
else&#13;
$gNil</bpel:from>
                                 <bpel:to>$gTaskInstance/trt:context/trt:actualOwner</bpel:to>
                              </bpel:copy>
                              <bpel:copy>
                                 <bpel:from>$gTaskInstance/trt:context/trt:status</bpel:from>
                                 <bpel:to variable="gOldState"/>
                              </bpel:copy>
                              <bpel:copy>
                                 <bpel:from>if ( $gTaskInstance/trt:context/trt:actualOwner != '' ) then&#13;
'RESERVED'&#13;
else&#13;
'READY'</bpel:from>
                                 <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                              </bpel:copy>
                              <bpel:copy>
                                 <bpel:from>$gTaskInstance/trt:context/trt:status != $gOldState</bpel:from>
                                 <bpel:to variable="stateChanged"/>
                              </bpel:copy>
                           </bpel:assign>
                        </bpel:if>
                     </bpel:onMessage>
                     <bpel:onMessage operation="remove" partnerLink="taskOperations" variable="remove">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Remove">
                           <bpel:variables>
                              <bpel:variable element="htdt:removeResponse" name="removeResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <empty/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                              <bpel:variable element="tsw:removeOwnerRequest" name="removeOwnerRequest"/>
                              <bpel:variable element="tsw:removeOwnerResponse" name="removeOwnerResponse"/>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catchAll>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L138"/>
                                    </bpel:links>
                                    <bpel:assign name="illegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L138"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User is not authorized to remove this notification.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="remove" partnerLink="taskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L138"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                              </bpel:catchAll>
                           </bpel:faultHandlers>
                           <bpel:sequence>
                              <bpel:assign name="populateRequest">
                                 <bpel:copy>
                                    <bpel:from>&lt;tsw:removeOwnerRequest xmlns:htd="http://www.example.org/WS-HT" xmlns:tsw="http://schemas.active-endpoints.com/b4p/wshumantask/2007/10/aeb4p-task-state-wsdl.xsd"&gt;&#13;
  &lt;tsw:recipients&gt;&#13;
  { &#13;
     if (exists($gTaskInstance/trt:context/trt:recipients/*))&#13;
     then $gTaskInstance/trt:context/trt:recipients/*&#13;
     else $gNil/@xsi:nil&#13;
  }&#13;
   &lt;/tsw:recipients&gt;&#13;
   &lt;tsw:excludedOwners&gt;&#13;
  { &#13;
     if (exists($gTaskInstance/trt:context/trt:excludedOwners/*))&#13;
     then $gTaskInstance/trt:context/trt:excludedOwners/*&#13;
     else $gNil/@xsi:nil&#13;
  }&#13;
   &lt;/tsw:excludedOwners&gt;&#13;
   &lt;tsw:principalName&gt;{string(abx:getMyRoleProperty('taskOperations','remove', 'abx:principal'))}&lt;/tsw:principalName&gt;&#13;
   &lt;tsw:excludedOwnersCount&gt;{ $gRemovalCalls }&lt;/tsw:excludedOwnersCount&gt;&#13;
&lt;/tsw:removeOwnerRequest&gt;</bpel:from>
                                    <bpel:to variable="removeOwnerRequest"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:invoke inputVariable="removeOwnerRequest" name="RemoveOwner" operation="RemoveOwner" outputVariable="removeOwnerResponse" partnerLink="removeOwnerPLT"/>
                              <bpel:assign name="UpdateCount">
                                 <bpel:copy>
                                    <bpel:from>$gRemovalCalls + 1</bpel:from>
                                    <bpel:to variable="gRemovalCalls"/>
                                 </bpel:copy>
                                 <bpel:copy ignoreMissingFromData="yes">
                                    <bpel:from>$removeOwnerResponse/tsw:excludedOwners</bpel:from>
                                    <bpel:to variable="gTaskInstance">
                                       <bpel:query>trt:context/trt:excludedOwners</bpel:query>
                                    </bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>true</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="dataUpdated"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:reply operation="remove" partnerLink="taskOperations" variable="removeResponse"/>
                           </bpel:sequence>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="addAttachment" partnerLink="taskOperations" variable="addAttachment">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="AddAttachment">
                           <bpel:variables>
                              <bpel:variable element="htdt:addAttachmentResponse" name="addAttachmentResponse">
                                 <bpel:from>
                                    <bpel:literal>
                                       <empty/>
                                    </bpel:literal>
                                 </bpel:from>
                              </bpel:variable>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L151"/>
                                    </bpel:links>
                                    <bpel:assign name="illegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L151"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User is not authorized to add an attachment.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="addAttachment" partnerLink="taskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L151"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L152"/>
                                 <bpel:link name="L150"/>
                              </bpel:links>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L152"/>
                                 </bpel:targets>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:completionTime != ''</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L153"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalState">
                                       <bpel:sources>
                                          <bpel:source linkName="L153"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in an active state in order to add an attachment.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                          <bpel:to variable="illegalStateFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalStateFault" operation="addAttachment" partnerLink="taskOperations" variable="illegalStateFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L153"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                                 <bpel:elseif>
                                    <bpel:condition>$addAttachment/htdt:accessType = 'MIME'</bpel:condition>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L154"/>
                                       </bpel:links>
                                       <bpel:reply operation="addAttachment" partnerLink="taskOperations" variable="addAttachmentResponse">
                                          <bpel:targets>
                                             <bpel:target linkName="L154"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                       <bpel:assign name="addMIMEAttachment">
                                          <bpel:sources>
                                             <bpel:source linkName="L154"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>let $attachmentIds := trt:copyAllMimeAttachments('addAttachment', 'gAttachments')&#13;
return &#13;
&lt;attachments&gt;&#13;
{ $gAttachments/trt:attachmentId }&#13;
 {$attachmentIds/trt:attachmentId }&#13;
&lt;/attachments&gt;</bpel:from>
                                             <bpel:to variable="gAttachments">
                                                <bpel:query>/</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedBy</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedTime</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                    </bpel:flow>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L155"/>
                                       </bpel:links>
                                       <bpel:reply operation="addAttachment" partnerLink="taskOperations" variable="addAttachmentResponse">
                                          <bpel:targets>
                                             <bpel:target linkName="L155"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                       <bpel:assign name="createHTAttachment">
                                          <bpel:sources>
                                             <bpel:source linkName="L155"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>let $attachment := &#13;
&lt;attachment xmlns='http://www.example.org/WS-HT/api'&gt;&#13;
   &lt;attachmentInfo&gt;&#13;
      &lt;name&gt;{data( $addAttachment/htdt:name )}&lt;/name&gt;&#13;
      &lt;accessType&gt;{data( $addAttachment/htdt:accessType )}&lt;/accessType&gt;&#13;
      &lt;contentType&gt;{data( $addAttachment/htdt:contentType)}&lt;/contentType&gt;&#13;
      &lt;attachedAt&gt;{ current-dateTime() }&lt;/attachedAt&gt;&#13;
      &lt;attachedBy&gt;{$principal}&lt;/attachedBy&gt;&#13;
   &lt;/attachmentInfo&gt;&#13;
   &lt;value&gt;{data( $addAttachment/htdt:attachment )}&lt;/value&gt;&#13;
&lt;/attachment&gt;&#13;
return &#13;
&lt;attachments&gt;&#13;
{ $gAttachments/trt:attachmentId }&#13;
   &lt;trt:attachmentId&gt;{trt:addHTAttachment('gAttachments', $attachment)}&lt;/trt:attachmentId&gt;&#13;
&lt;/attachments&gt;</bpel:from>
                                             <bpel:to variable="gAttachments">
                                                <bpel:query>/</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedBy</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedTime</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                    </bpel:flow>
                                 </bpel:else>
                              </bpel:if>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L150"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L152"/>
                                 </bpel:sources>
                                 <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L77_3_1_1_1"/>
                                    </bpel:links>
                                    <bpel:assign name="PrepAssertion">
                                       <bpel:sources>
                                          <bpel:source linkName="L77_3_1_1_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                          <bpel:to variable="assertionInput"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-addAttachment" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                       <bpel:targets>
                                          <bpel:target linkName="L77_3_1_1_1"/>
                                       </bpel:targets>
                                    </bpel:invoke>
                                 </bpel:flow>
                              </bpel:if>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L150"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','addAttachment', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="deleteAttachments" partnerLink="taskOperations" variable="deleteAttachments">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="DeleteAttachments">
                           <bpel:variables>
                              <bpel:variable element="htdt:deleteAttachmentsResponse" name="deleteAttachmentsResponse"/>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L151_1"/>
                                    </bpel:links>
                                    <bpel:assign name="illegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L151_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User is not authorized to delete attachments.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="deleteAttachments" partnerLink="taskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L151_1"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L156"/>
                                 <bpel:link name="L157"/>
                              </bpel:links>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L156"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','deleteAttachments', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L156"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L157"/>
                                 </bpel:sources>
                                 <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L77_3_1_1_1_1"/>
                                    </bpel:links>
                                    <bpel:assign name="PrepAssertion">
                                       <bpel:sources>
                                          <bpel:source linkName="L77_3_1_1_1_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                          <bpel:to variable="assertionInput"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-deleteAttachments" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                       <bpel:targets>
                                          <bpel:target linkName="L77_3_1_1_1_1"/>
                                       </bpel:targets>
                                    </bpel:invoke>
                                 </bpel:flow>
                              </bpel:if>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L157"/>
                                 </bpel:targets>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:completionTime != ''</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L153_1"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalState">
                                       <bpel:sources>
                                          <bpel:source linkName="L153_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in an active state in order to delete attachments.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                          <bpel:to variable="illegalStateFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalStateFault" operation="deleteAttachments" partnerLink="taskOperations" variable="illegalStateFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L153_1"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                                 <bpel:else>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L155_1"/>
                                       </bpel:links>
                                       <bpel:reply operation="deleteAttachments" partnerLink="taskOperations" variable="deleteAttachmentsResponse">
                                          <bpel:targets>
                                             <bpel:target linkName="L155_1"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                       <bpel:assign name="deleteAttachments">
                                          <bpel:sources>
                                             <bpel:source linkName="L155_1"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>let $removedAttachments := trt:removeHTAttachmentsByName('gAttachments', data($deleteAttachments/htdt:attachmentName) )&#13;
return&#13;
&lt;attachmentIds&gt;&#13;
{&#13;
for $attachmentId in $gAttachments/trt:attachmentId&#13;
where not(exists($removedAttachments//trt:attachmentId[text() = $attachmentId]))&#13;
return $attachmentId&#13;
}&#13;
&lt;/attachmentIds&gt;</bpel:from>
                                             <bpel:to variable="gAttachments">
                                                <bpel:query>/</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedBy</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedTime</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>
                                                   <empty/>
                                                </bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="deleteAttachmentsResponse"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                    </bpel:flow>
                                 </bpel:else>
                              </bpel:if>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="deleteAttachmentById" partnerLink="aeTaskOperations" variable="deleteAttachmentByIdRequest">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="DeleteAttachmentById">
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L151_1_1"/>
                                    </bpel:links>
                                    <bpel:assign name="illegalAccess">
                                       <bpel:sources>
                                          <bpel:source linkName="L151_1_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User is not authorized to delete attachments.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="deleteAttachmentById" partnerLink="aeTaskOperations" variable="illegalAccessFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L151_1_1"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L157_1"/>
                                 <bpel:link name="L156_1"/>
                              </bpel:links>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L156_1"/>
                                 </bpel:targets>
                                 <bpel:sources>
                                    <bpel:source linkName="L157_1"/>
                                 </bpel:sources>
                                 <bpel:condition>$principal != $gTaskInstance/trt:context/trt:actualOwner</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L77_3_1_1_1_1_1"/>
                                    </bpel:links>
                                    <bpel:assign name="PrepAssertion">
                                       <bpel:sources>
                                          <bpel:source linkName="L77_3_1_1_1_1_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                          <bpel:to variable="assertionInput"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-deleteAttachmentById" operation="assertPrincipalInQueryResult" partnerLink="identityPL">
                                       <bpel:targets>
                                          <bpel:target linkName="L77_3_1_1_1_1_1"/>
                                       </bpel:targets>
                                    </bpel:invoke>
                                 </bpel:flow>
                              </bpel:if>
                              <bpel:if>
                                 <bpel:targets>
                                    <bpel:target linkName="L157_1"/>
                                 </bpel:targets>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:completionTime != ''</bpel:condition>
                                 <bpel:flow>
                                    <bpel:links>
                                       <bpel:link name="L153_1_1"/>
                                    </bpel:links>
                                    <bpel:assign name="IllegalState">
                                       <bpel:sources>
                                          <bpel:source linkName="L153_1_1"/>
                                       </bpel:sources>
                                       <bpel:copy>
                                          <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in an active state in order to delete attachments.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                          <bpel:to variable="illegalStateFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="ts:illegalStateFault" operation="deleteAttachmentById" partnerLink="aeTaskOperations" variable="illegalStateFault">
                                       <bpel:targets>
                                          <bpel:target linkName="L153_1_1"/>
                                       </bpel:targets>
                                    </bpel:reply>
                                 </bpel:flow>
                                 <bpel:else>
                                    <bpel:flow>
                                       <bpel:links>
                                          <bpel:link name="L155_1_1"/>
                                       </bpel:links>
                                       <bpel:reply operation="deleteAttachmentById" partnerLink="aeTaskOperations">
                                          <bpel:targets>
                                             <bpel:target linkName="L155_1_1"/>
                                          </bpel:targets>
                                       </bpel:reply>
                                       <bpel:assign name="deleteAttachment">
                                          <bpel:sources>
                                             <bpel:source linkName="L155_1_1"/>
                                          </bpel:sources>
                                          <bpel:copy>
                                             <bpel:from>let $removedAttachment := trt:removeHTAttachmentById('gAttachments', data( $deleteAttachmentByIdRequest/tsw:attachmentId ) )&#13;
return&#13;
&lt;attachmentIds&gt;&#13;
{&#13;
for $attachmentId in $gAttachments/trt:attachmentId&#13;
where not(exists($removedAttachment//trt:attachmentId[text() = $attachmentId]))&#13;
return $attachmentId&#13;
}&#13;
&lt;/attachmentIds&gt;</bpel:from>
                                             <bpel:to variable="gAttachments">
                                                <bpel:query>/</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{$principal}&lt;/lmb&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedBy</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedTime</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                    </bpel:flow>
                                 </bpel:else>
                              </bpel:if>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:sources>
                                    <bpel:source linkName="L156_1"/>
                                 </bpel:sources>
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('aeTaskOperations','deleteAttachmentById', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="cancel" partnerLink="internal" variable="cancelTaskRequest">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="CancelTask">
                           <bpel:flow>
                              <bpel:links>
                                 <bpel:link name="L158"/>
                              </bpel:links>
                              <bpel:if>
                                 <bpel:sources>
                                    <bpel:source linkName="L158"/>
                                 </bpel:sources>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:completionTime = ''</bpel:condition>
                                 <bpel:assign name="MarkAsCancelled">
                                    <bpel:copy>
                                       <bpel:from>$gTaskInstance/trt:context/trt:status</bpel:from>
                                       <bpel:to variable="gOldState"/>
                                    </bpel:copy>
                                    <bpel:copy>
                                       <bpel:from>&lt;ct&gt;{ current-dateTime() }&lt;/ct&gt;</bpel:from>
                                       <bpel:to>$gTaskInstance/trt:context/trt:completionTime</bpel:to>
                                    </bpel:copy>
                                    <bpel:copy>
                                       <bpel:from>
                                          <bpel:literal>EXITED</bpel:literal>
                                       </bpel:from>
                                       <bpel:to>$gTaskInstance/trt:context/trt:status</bpel:to>
                                    </bpel:copy>
                                    <bpel:copy>
                                       <bpel:from>
                                          <bpel:literal>true</bpel:literal>
                                       </bpel:from>
                                       <bpel:to variable="stateChanged"/>
                                    </bpel:copy>
                                 </bpel:assign>
                              </bpel:if>
                              <bpel:reply operation="cancel" partnerLink="internal">
                                 <bpel:targets>
                                    <bpel:target linkName="L158"/>
                                 </bpel:targets>
                              </bpel:reply>
                           </bpel:flow>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="finalize" partnerLink="internal" variable="finalize">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Finalize">
                           <bpel:variables>
                              <bpel:variable element="store:deleteTaskData" name="deleteTask"/>
                           </bpel:variables>
                           <bpel:faultHandlers>
                              <bpel:catchAll>
                                 <bpel:empty name="IgnoreFault"/>
                              </bpel:catchAll>
                           </bpel:faultHandlers>
                           <bpel:sequence>
                              <bpel:assign name="MarkAsFinal">
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>true</bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="gFinalStateReached"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>abx:getProcessId()</bpel:from>
                                    <bpel:to variable="deleteTask"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:invoke inputVariable="deleteTask" name="DeleteTask" operation="deleteTask" partnerLink="storagePL"/>
                           </bpel:sequence>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="nominate" partnerLink="taskOperations" variable="nominate">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="Nominate">
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:sequence>
                                    <bpel:assign name="illegalAccess">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User is not authorized to nominate task.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="nominate" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                 </bpel:sequence>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:sequence>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','nominate', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                    <bpel:to variable="assertionInput"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-nominate" operation="assertPrincipalInQueryResult" partnerLink="identityPL"/>
                              <bpel:if>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:status = 'CREATED'</bpel:condition>
                                 <bpel:sequence>
                                    <bpel:assign name="MarkAsNominated">
                                       <bpel:copy>
                                          <bpel:from>if (count( $nominate/htdt:organizationalEntity/htd:users/htd:user ) = 1) then 'RESERVED' else 'READY'</bpel:from>
                                          <bpel:to variable="gTaskInstance">
                                             <bpel:query>trt:context/trt:status</bpel:query>
                                          </bpel:to>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>if (count( $nominate/htdt:organizationalEntity/htd:users/htd:user ) = 1) then &#13;
&lt;actualOwner&gt;{data($nominate/htdt:organizationalEntity/htd:users/htd:user)}&lt;/actualOwner&gt;&#13;
else $gNil</bpel:from>
                                          <bpel:to variable="gTaskInstance">
                                             <bpel:query>trt:context/trt:actualOwner</bpel:query>
                                          </bpel:to>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>CREATED</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="gOldState"/>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>&lt;lmb&gt;{ $principal }&lt;/lmb&gt;</bpel:from>
                                          <bpel:to variable="gTaskInstance">
                                             <bpel:query>trt:context/trt:lastModifiedBy</bpel:query>
                                          </bpel:to>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                          <bpel:to variable="gTaskInstance">
                                             <bpel:query>trt:context/trt:lastModifiedTime</bpel:query>
                                          </bpel:to>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>$nominate/htdt:organizationalEntity</bpel:from>
                                          <bpel:to variable="gTaskInstance">
                                             <bpel:query>trt:context/trt:potentialOwners</bpel:query>
                                          </bpel:to>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>
                                                <empty/>
                                             </bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="nominateResponse"/>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>true</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="stateChanged"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply operation="nominate" partnerLink="taskOperations" variable="nominateResponse"/>
                                 </bpel:sequence>
                                 <bpel:else>
                                    <bpel:sequence>
                                       <bpel:assign name="IllegalState">
                                          <bpel:copy>
                                             <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in CREATED state in order to be nominated.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                             <bpel:to variable="illegalStateFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalStateFault" operation="nominate" partnerLink="taskOperations" variable="illegalStateFault"/>
                                    </bpel:sequence>
                                 </bpel:else>
                              </bpel:if>
                           </bpel:sequence>
                        </bpel:scope>
                     </bpel:onMessage>
                     <bpel:onMessage operation="setGenericHumanRole" partnerLink="taskOperations" variable="setGenericHumanRole">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" set="CS1"/>
                        </bpel:correlations>
                        <bpel:scope name="SetGenericHumanRole">
                           <bpel:faultHandlers>
                              <bpel:catch faultName="aeid:searchFault">
                                 <bpel:sequence>
                                    <bpel:assign name="illegalAccess">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>User is not authorized to modify this task's roles.</bpel:literal>
                                          </bpel:from>
                                          <bpel:to variable="illegalAccessFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalAccessFault" operation="setGenericHumanRole" partnerLink="taskOperations" variable="illegalAccessFault"/>
                                 </bpel:sequence>
                              </bpel:catch>
                           </bpel:faultHandlers>
                           <bpel:sequence>
                              <bpel:assign name="SetPrincipal">
                                 <bpel:copy>
                                    <bpel:from>string(abx:getMyRoleProperty('taskOperations','setGenericHumanRole', 'abx:principal'))</bpel:from>
                                    <bpel:to variable="principal"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>&lt;aeid:principalQueryAssertion xmlns:ns="http://schemas.active-endpoints.com/identity/2007/01/identity.xsd" xmlns:ns1="http://docs.active-endpoints/wsdl/identity/2007/03/identity.wsdl"&gt;&#13;
   &lt;aeid:principalName&gt;{ $principal }&lt;/aeid:principalName&gt;&#13;
   {&#13;
	(: Add the admins + stakeholders  :)&#13;
	trt:toIdentityQuery(trt:union($gTaskInstance/trt:context/trt:businessAdministrators,&#13;
                                      $gTaskInstance/trt:context/trt:taskStakeholders ))&#13;
   }&#13;
&lt;/aeid:principalQueryAssertion&gt;</bpel:from>
                                    <bpel:to variable="assertionInput"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>
                                          <empty/>
                                       </bpel:literal>
                                    </bpel:from>
                                    <bpel:to variable="setGenericHumanRoleResponse"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:invoke inputVariable="assertionInput" name="AssertAdmin-setGenericHumanRole" operation="assertPrincipalInQueryResult" partnerLink="identityPL"/>
                              <bpel:if>
                                 <bpel:condition>$gTaskInstance/trt:context/trt:completionTime != ''</bpel:condition>
                                 <bpel:sequence>
                                    <bpel:assign name="IllegalState">
                                       <bpel:copy>
                                          <bpel:from>&lt;htdt:illegalState xmlns:htdt="http://www.example.org/WS-HT/api/xsd"&gt;&#13;
   &lt;htdt:status&gt;{ data($gTaskInstance/trt:context/trt:status) }&lt;/htdt:status&gt;&#13;
   &lt;htdt:message&gt;Task must be in CREATED state in order to be nominated.&lt;/htdt:message&gt;&#13;
&lt;/htdt:illegalState&gt;</bpel:from>
                                          <bpel:to variable="illegalStateFault"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="htaw:illegalStateFault" operation="setGenericHumanRole" partnerLink="taskOperations" variable="illegalStateFault"/>
                                 </bpel:sequence>
                                 <bpel:elseif>
                                    <bpel:condition>$setGenericHumanRole/htdt:genericHumanRole = 'potentialOwners'</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="SetPotentialOwners">
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{ $principal }&lt;/lmb&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedBy</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedTime</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>$setGenericHumanRole/htdt:organizationalEntity</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:potentialOwners</bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="setGenericHumanRole" partnerLink="taskOperations" variable="setGenericHumanRoleResponse"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>$setGenericHumanRole/htdt:genericHumanRole = 'excludedOwners'</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="SetExcludedOwners">
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{ $principal }&lt;/lmb&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedBy</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedTime</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>$setGenericHumanRole/htdt:organizationalEntity</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:excludedOwners</bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="setGenericHumanRole" partnerLink="taskOperations" variable="setGenericHumanRoleResponse"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>$setGenericHumanRole/htdt:genericHumanRole = 'taskInitiator'</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="SetTaskInitiator">
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{ $principal }&lt;/lmb&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedBy</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedTime</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>$setGenericHumanRole/htdt:organizationalEntity/htd:users/htd:user</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:taskInitiator</bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="setGenericHumanRole" partnerLink="taskOperations" variable="setGenericHumanRoleResponse"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>$setGenericHumanRole/htdt:genericHumanRole = 'taskStakeholders'</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="SetTaskStakeholders">
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{ $principal }&lt;/lmb&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedBy</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedTime</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>$setGenericHumanRole/htdt:organizationalEntity</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:taskStakeholders</bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="setGenericHumanRole" partnerLink="taskOperations" variable="setGenericHumanRoleResponse"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>$setGenericHumanRole/htdt:genericHumanRole = 'businessAdministrators'</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="SetBusinessAdministrators">
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{ $principal }&lt;/lmb&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedBy</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedTime</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>$setGenericHumanRole/htdt:organizationalEntity</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:businessAdministrators</bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="setGenericHumanRole" partnerLink="taskOperations" variable="setGenericHumanRoleResponse"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:elseif>
                                    <bpel:condition>$setGenericHumanRole/htdt:genericHumanRole = 'recipients'</bpel:condition>
                                    <bpel:sequence>
                                       <bpel:assign name="SetRecipients">
                                          <bpel:copy>
                                             <bpel:from>&lt;lmb&gt;{ $principal }&lt;/lmb&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedBy</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>&lt;lm&gt;{ current-dateTime() }&lt;/lm&gt;</bpel:from>
                                             <bpel:to variable="gTaskInstance">
                                                <bpel:query>trt:context/trt:lastModifiedTime</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>true</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="dataUpdated"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>$setGenericHumanRole/htdt:organizationalEntity</bpel:from>
                                             <bpel:to>$gTaskInstance/trt:context/trt:recipients</bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply operation="setGenericHumanRole" partnerLink="taskOperations" variable="setGenericHumanRoleResponse"/>
                                    </bpel:sequence>
                                 </bpel:elseif>
                                 <bpel:else>
                                    <bpel:sequence>
                                       <bpel:assign name="IllegalState">
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>Unknown generic human role.</bpel:literal>
                                             </bpel:from>
                                             <bpel:to variable="illegalArgumentFault"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="htaw:illegalArgumentFault" operation="setGenericHumanRole" partnerLink="taskOperations" variable="illegalArgumentFault"/>
                                    </bpel:sequence>
                                 </bpel:else>
                              </bpel:if>
                           </bpel:sequence>
                        </bpel:scope>
                     </bpel:onMessage>
                  </bpel:pick>
               </bpel:scope>
            </bpel:flow>
         </bpel:repeatUntil>
      </bpel:scope>
   </bpel:sequence>
</bpel:process>
